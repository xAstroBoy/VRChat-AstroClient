namespace AstroClient.UdonExploits.Murder4
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using AstroMonos.Components.Cheats.Worlds.JarWorlds;
    using Tools.Extensions;
    using Tools.UdonEditor;
    using Tools.UdonSearcher;
    using UnhollowerBaseLib;
    using UnityEngine;
    using UnityEngine.UI;
    using VRC.Udon;
    using VRC.Udon.Common.Interfaces;
    using xAstroBoy.AstroButtonAPI;

    internal static class Murder4UdonExploits
    {
        // TODO : REWRITE THEM ALL!!!!
        internal static void Init_RoleSwap_Menu(QMNestedGridMenu menu)
        {
            var main = new QMNestedButton(menu, "Swap Roles", "Run Udon Events globally");
            main.GetMainButton();
            var idkwhythisishere = new QMNestedButton(main, -5f, -5f, "", "");
            idkwhythisishere.GetMainButton().SetActive(false);
            var MainScroll = new QMHalfScroll(idkwhythisishere);
            var subscroll = new QMHalfScroll(main);
            _ = new QMSingleButton(main, 0, -1, "Refresh", delegate
            {
                MainScroll.Refresh();
                subscroll.Refresh();
            }, "", null, null, true);
            subscroll.SetAction(delegate
            {
                try
                {
                    if (JarRoleController.RoleEspComponents.Count() != 0)
                    {
                        var tmplist = new List<string>();
                        for (int i = 0; i < JarRoleController.RoleEspComponents.Count; i++)
                        {
                            JarRoleESP Component = JarRoleController.RoleEspComponents[i];
                            if (Component != null && Component.LinkedNode != null)
                            {
                                Il2CppArrayBase<UdonBehaviour> list = Component.LinkedNode.Node.GetComponentsInChildren<UdonBehaviour>();
                                for (int i1 = 0; i1 < list.Count; i1++)
                                {
                                    UdonBehaviour action = list[i1];
                                    if (action != null)
                                    {
                                        if (Component.LinkedNode.NodeReader.VRCPlayerAPI != null)
                                        {
                                            var NodeTranslated = Component.LinkedNode.NodeReader.VRCPlayerAPI.displayName;

                                            if (tmplist.Contains(NodeTranslated))
                                            {
                                                continue;
                                            }

                                            var playerbtn = new QMSingleButton(main, 0f, 0f, NodeTranslated, null, "Swap Role with " + NodeTranslated, null, null, true);
                                            playerbtn.SetAction(() =>
                                            {
                                                // FIND ASSIGNED ROLE ON PLAYER NODE
                                                string SelfRoleString = "none";
                                                string TargetRoleString = "none";

                                                var LocalPlayer = JarRoleController.CurrentPlayerRoleESP;
                                                if (LocalPlayer != null)
                                                {
                                                    if (LocalPlayer.Murder4CurrentRole == JarRoleESP.Murder4Roles.Bystander)
                                                    {
                                                        SelfRoleString = "SyncAssignB";
                                                    }

                                                    if (LocalPlayer.Murder4CurrentRole == JarRoleESP.Murder4Roles.Detective)
                                                    {
                                                        SelfRoleString = "SyncAssignD";
                                                    }

                                                    if (LocalPlayer.Murder4CurrentRole == JarRoleESP.Murder4Roles.Murderer)
                                                    {
                                                        SelfRoleString = "SyncAssignM";
                                                    }
                                                }

                                                if (Component != null)
                                                {
                                                    if (Component.Murder4CurrentRole == JarRoleESP.Murder4Roles.Bystander)
                                                    {
                                                        TargetRoleString = "SyncAssignB";
                                                    }

                                                    if (Component.Murder4CurrentRole == JarRoleESP.Murder4Roles.Detective)
                                                    {
                                                        TargetRoleString = "SyncAssignD";
                                                    }

                                                    if (Component.Murder4CurrentRole == JarRoleESP.Murder4Roles.Murderer)
                                                    {
                                                        TargetRoleString = "SyncAssignM";
                                                    }
                                                }

                                                UdonSearch.FindUdonEvent(LocalPlayer.LinkedNode.Node.gameObject, TargetRoleString).ExecuteUdonEvent();
                                                UdonSearch.FindUdonEvent(Component.LinkedNode.Node.gameObject, SelfRoleString).ExecuteUdonEvent();
                                            });

                                            var textcolor = Component.Murder4GetNamePlateColor();
                                            if (textcolor != null)
                                            {
                                                playerbtn.SetTextColor(textcolor.Value);
                                            }

                                            subscroll.Add(playerbtn);
                                            tmplist.Add(NodeTranslated);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        var NoNodesFound = new QMSingleButton(main, 0f, 0f, "No Nodes Found", null, "No Nodes Found", null, null, true);
                        subscroll.Add(NoNodesFound);
                    }
                }
                catch (Exception e)
                {
                    ModConsole.Error("[MURDER 4]: Error in Role Swapper Button!");
                    ModConsole.ErrorExc(e);
                    var btnerror = new QMSingleButton(main, 0f, 0f, "ERROR, SEE CONSOLE", null, "ERROR, SEE CONSOLE", null, Color.red, true);
                    subscroll.Add(btnerror);
                }
            });
        }

        internal static void Init_GameController_Btn(QMNestedGridMenu menu)
        {
            var main = new QMNestedButton(menu, "Game Controller", "Control The Game Events!");
            main.GetMainButton();
            var registersub = new QMNestedButton(main, -5f, -5f, "", "");
            registersub.GetMainButton().SetActive(false);
            var MainScroll = new QMHalfScroll(registersub);
            var subscroll = new QMHalfScroll(main);
            _ = new QMSingleButton(main, 0, -1, "Refresh", delegate
            {
                MainScroll.Refresh();
                subscroll.Refresh();
            }, "", null, null, true);
            subscroll.SetAction(delegate
            {
                try
                {
                    for (int i = 0; i < UdonParser.WorldBehaviours.Length; i++)
                    {
                        UdonBehaviour action = UdonParser.WorldBehaviours[i];
                        if (action.gameObject.name == "Game Logic")
                        {
                            foreach (var subaction in action._eventTable)
                            {
                                var subaction_btn = new QMSingleButton(main, 0f, 0f, subaction.Key, null, action.gameObject?.ToString() + " Execute " + subaction.Key, null, null, true);
                                subaction_btn.SetAction(() => { action.SendCustomNetworkEvent(NetworkEventTarget.All, subaction.Key); });
                                subscroll.Add(subaction_btn);
                            }

                            break;
                        }
                    }
                }
                catch (Exception e)
                {
                    ModConsole.Error("[MURDER 4]: Error in Game Controller Button!");
                    ModConsole.ErrorExc(e);
                    var btnerror = new QMSingleButton(main, 0f, 0f, "ERROR, SEE CONSOLE", null, "ERROR, SEE CONSOLE", null, Color.red, true);
                    subscroll.Add(btnerror);
                }
            });
        }

        internal static void Init_Unfiltered_Nodes_btn(QMNestedGridMenu menu)
        {
            var main = new QMNestedButton(menu, "Unfiltered Nodes", "Control Player Nodes events");
            var whytfisthishere = new QMNestedButton(main, -5f, -5f, "", "");
            whytfisthishere.GetMainButton().SetActive(false);
            var MainScroll = new QMHalfScroll(whytfisthishere);
            var subscroll = new QMHalfScroll(main);
            _ = new QMSingleButton(main, 0, -1, "Refresh", delegate
            {
                MainScroll.Refresh();
                subscroll.Refresh();
            }, "", null, null, true);
            subscroll.SetAction(delegate
            {
                try
                {
                    var filterstring = new List<string>();
                    if (JarRoleController.JarRoleLinks.Count() != 0)
                    {
                        for (int i = 0; i < JarRoleController.JarRoleLinks.Count; i++)
                        {
                            JarRoleController.LinkedNodes Component = JarRoleController.JarRoleLinks[i];
                            Il2CppArrayBase<UdonBehaviour> list = Component.Node.GetComponentsInChildren<UdonBehaviour>();
                            for (int i1 = 0; i1 < list.Count; i1++)
                            {
                                UdonBehaviour action = list[i1];
                                if (action != null)
                                {
                                    string btnname = string.Empty;
                                    if (Component.NodeReader.VRCPlayerAPI != null && Component.NodeReader != null)
                                    {
                                        btnname = Component.NodeReader.VRCPlayerAPI.displayName;
                                    }
                                    else
                                    {
                                        btnname = action.gameObject.name;
                                    }

                                    if (filterstring.Contains(btnname))
                                    {
                                        continue;
                                    }

                                    subscroll.Add(new QMSingleButton(main, 0f, 0f, btnname, delegate
                                    {
                                        MainScroll.SetAction(delegate
                                        {
                                            foreach (var subaction in action._eventTable)
                                            {
                                                var subaction_btn = new QMSingleButton(MainScroll.BaseMenu, 0f, 0f, subaction.Key, delegate { action.SendCustomNetworkEvent(NetworkEventTarget.All, subaction.Key); }, action.gameObject?.ToString() + " Run " + subaction.Key, null, null, true);
                                                MainScroll.Add(subaction_btn);
                                            }
                                        });
                                        MainScroll.BaseMenu.GetMainButton().GetGameObject().GetComponent<Button>()
                                            .onClick.Invoke();
                                    }, action.interactText, null, null, true));
                                    filterstring.Add(btnname);
                                }
                            }
                        }
                    }
                    else
                    {
                        var NoNodesFound = new QMSingleButton(main, 0f, 0f, "No Nodes Found", null, "No Nodes Found", null, null, true);
                        subscroll.Add(NoNodesFound);
                    }
                }
                catch (Exception e)
                {
                    ModConsole.Error("[MURDER 4]: Error in Unfiltered Nodes Button!");
                    ModConsole.ErrorExc(e);
                    var btnerror = new QMSingleButton(main, 0f, 0f, "ERROR, SEE CONSOLE", null, "ERROR, SEE CONSOLE", null, Color.red, true);
                    subscroll.Add(btnerror);
                }
            });
        }

        internal static void Init_Filtered_Nodes_Btn(QMNestedGridMenu menu)
        {
            var main = new QMNestedButton(menu, "Filtered Nodes", "Control Player Nodes Events (Filtered, only active nodes)");
            var whytfisthishere = new QMNestedButton(main, -5f, -5f, "", "");
            whytfisthishere.GetMainButton().SetActive(false);
            var MainScroll = new QMHalfScroll(whytfisthishere);
            var subscroll = new QMHalfScroll(main);
            _ = new QMSingleButton(main, 0, -1, "Refresh", delegate
            {
                MainScroll.Refresh();
                subscroll.Refresh();
            }, "", null, null, true);
            subscroll.SetAction(delegate
            {
                try
                {
                    if (JarRoleController.RoleEspComponents.Count() != 0)
                    {
                        var tmplist = new List<string>(); // WHY SO SUDDENLY IT DECIDES TO HAVE MULTIPLE BUTTONS WITH THE SAME PLAYER? FFS
                        for (int i = 0; i < JarRoleController.RoleEspComponents.Count; i++)
                        {
                            JarRoleESP Component = JarRoleController.RoleEspComponents[i];
                            if (Component != null && Component.LinkedNode != null)
                            {
                                Il2CppArrayBase<UdonBehaviour> list = Component.LinkedNode.Node.GetComponentsInChildren<UdonBehaviour>();
                                for (int i1 = 0; i1 < list.Count; i1++)
                                {
                                    UdonBehaviour action = list[i1];
                                    if (action != null)
                                    {
                                        if (Component.LinkedNode.NodeReader.VRCPlayerAPI != null)
                                        {
                                            string PlayerNode = Component.LinkedNode.NodeReader.VRCPlayerAPI.displayName;

                                            if (tmplist.Contains(PlayerNode))
                                            {
                                                continue;
                                            }

                                            var PlayerExploitsChoicesBtn = new QMSingleButton(main, 0f, 0f, PlayerNode, delegate
                                            {
                                                MainScroll.SetAction(delegate
                                                {
                                                    foreach (var subaction in action._eventTable)
                                                    {
                                                        var subaction_btn = new QMSingleButton(MainScroll.BaseMenu, 0f, 0f, subaction.Key, delegate { action.SendCustomNetworkEvent(NetworkEventTarget.All, subaction.Key); }, action.gameObject?.ToString() + " Run " + subaction.Key, null, null, true);

                                                        MainScroll.Add(subaction_btn);
                                                    }
                                                });
                                                MainScroll.BaseMenu.GetMainButton().GetGameObject().GetComponent<Button>()
                                                    .onClick.Invoke();
                                            }, action.interactText, null, null, true);
                                            var textcolor = Component.Murder4GetNamePlateColor();
                                            if (textcolor != null)
                                            {
                                                PlayerExploitsChoicesBtn.SetTextColor(textcolor.Value);
                                            }

                                            subscroll.Add(PlayerExploitsChoicesBtn);
                                            tmplist.Add(PlayerNode);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        var NoNodesFound = new QMSingleButton(main, 0f, 0f, "No Nodes Found", null, "No Nodes Found", null, null, true);
                        subscroll.Add(NoNodesFound);
                    }
                }
                catch (Exception e)
                {
                    ModConsole.Error("[MURDER 4]: Error in Filtered Nodes Button!");
                    ModConsole.ErrorExc(e);
                    var btnerror = new QMSingleButton(main, 0f, 0f, "ERROR, SEE CONSOLE", null, "ERROR, SEE CONSOLE", null, Color.red, true);
                    subscroll.Add(btnerror);
                }
            });
        }
    }
}