namespace AstroClient.Tools.Exploits
{
    using CheetoLibrary.Misc;
    using Il2CppSystem;
    using UnhollowerBaseLib;
    using UnhollowerRuntimeLib;
    using UnityEngine;
    using VRC;
    using VRC.SDKBase;
    using xAstroBoy.Utility;
    using Exception = System.Exception;
    using Object = Il2CppSystem.Object;

    internal static class TeleportExploit
    {
        internal static void TeleportRPCExploit(Player Plr, Vector3 Position, Quaternion Rotation)
        {
            try
            {
                Object[] array = new Object[5];
                array[0] = Position.BoxIl2CppObject();
                array[1] = Rotation.BoxIl2CppObject();
                array[2] = SpawnOrientation_Default;
                array[3] = new Boolean { m_value = true }.BoxIl2CppObject();
                array[4] = new Int32 { m_value = Plr.GetVRCPlayerApi().playerId }.BoxIl2CppObject();
                Il2CppReferenceArray<Object> parameters = new Il2CppReferenceArray<Object>(array);
                var ByteArray = Networking.EncodeParameters(parameters);
                VRC_EventHandler.VrcEvent vrcEvent = new VRC_EventHandler.VrcEvent
                {
                    EventType = VRC_EventHandler.VrcEventType.TeleportPlayer,
                    ParameterObject = Plr.gameObject,
                    ParameterInt = 9,
                    ParameterString = "TeleportRPC",
                    ParameterBytes = ByteArray,
                };
                VRC_EventHandler eventhandler = MiscUtils_Old.FindNearestEventHandler(Plr.gameObject);
                if (eventhandler != null)
                {
                    eventhandler.TriggerEvent(vrcEvent, VRC_EventHandler.VrcBroadcastType.AlwaysUnbuffered, Plr.GetVRCPlayerApi().mPlayerId, 0f);
                }
            }
            catch (Exception e)
            {
                Log.Error("Failed Running TeleportRPC Exploit !");
                Log.Exception(e);
            }
        }

        internal static Object GetTheFuckingType()
        {
            foreach (var item in Il2CppType.Of<VRC_SceneDescriptor.SpawnOrientation>().GetEnumValues())
            {
                if (item.Unbox<VRC_SceneDescriptor.SpawnOrientation>() == VRC_SceneDescriptor.SpawnOrientation.Default)
                {
                    return item;
                }
            }

            return null;
        }

        private static Object _SpawnOrientation_Default;

        internal static Object SpawnOrientation_Default
        {
            get
            {
                if (_SpawnOrientation_Default != null)
                {
                    return _SpawnOrientation_Default;
                }

                return _SpawnOrientation_Default = GetTheFuckingType();
            }
        }
    }
}