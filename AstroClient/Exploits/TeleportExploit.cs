namespace AstroClient.Exploits
{
	using AstroLibrary.Console;
	using AstroLibrary.Extensions;
	using AstroLibrary.Utility;
	using System;
	using UnhollowerBaseLib;
	using UnhollowerRuntimeLib;
	using UnityEngine;
	using VRC.SDKBase;

	public static class TeleportExploit
	{
		public static void TeleportRPCExploit(VRC.Player Plr, Vector3 Position, Quaternion Rotation)
		{
			try
			{
				Il2CppSystem.Object[] array = new Il2CppSystem.Object[5];
				array[0] = Position.BoxIl2CppObject();
				array[1] = Rotation.BoxIl2CppObject();
				array[2] = SpawnOrientation_Default;		
				array[3] = new Il2CppSystem.Boolean { m_value = true }.BoxIl2CppObject();
				array[4] = new Il2CppSystem.Int32 { m_value = Plr.GetVRCPlayerApi().playerId }.BoxIl2CppObject();
				Il2CppReferenceArray<Il2CppSystem.Object> parameters = new Il2CppReferenceArray<Il2CppSystem.Object>(array);
				var ByteArray = Networking.EncodeParameters(parameters);
				VRC_EventHandler.VrcEvent vrcEvent = new VRC_EventHandler.VrcEvent
				{
					EventType = VRC_EventHandler.VrcEventType.TeleportPlayer,
					ParameterObject = Plr.gameObject,
					ParameterInt = 9,
					ParameterString = "TeleportRPC",
					ParameterBytes = ByteArray,
				};
				VRC_EventHandler eventhandler = MiscUtils_Old.FindNearestEventHandler(Plr.gameObject);
				if(eventhandler != null)
				{
				eventhandler.TriggerEvent(vrcEvent, VRC_EventHandler.VrcBroadcastType.AlwaysUnbuffered, Plr.GetVRCPlayerApi().mPlayerId, 0f);

				}
			}
			catch (Exception e)
			{
				ModConsole.Error("Failed Running TeleportRPC Exploit !");
				ModConsole.ErrorExc(e);
			}
		}


		public static Il2CppSystem.Object GetTheFuckingType()
		{
			foreach (var item in Il2CppType.Of<VRC_SceneDescriptor.SpawnOrientation>().GetEnumValues())
			{
				if (item.Unbox<VRC_SceneDescriptor.SpawnOrientation>() == VRC_SceneDescriptor.SpawnOrientation.Default)
				{
					return item;
				}
			}
			return null;
		}

		private static Il2CppSystem.Object _SpawnOrientation_Default;

		public static Il2CppSystem.Object SpawnOrientation_Default
		{
			get
			{
				if(_SpawnOrientation_Default != null)
				{
					return _SpawnOrientation_Default;
				}
				else
				{
					return _SpawnOrientation_Default = GetTheFuckingType();
				}
			}
		}




	}
}