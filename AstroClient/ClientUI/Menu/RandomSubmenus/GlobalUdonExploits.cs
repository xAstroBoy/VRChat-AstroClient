namespace AstroClient.ClientUI.Menu.RandomSubmenus
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using AstroMonos.Components.Tools.Listeners;
    using CustomClasses;
    using MelonLoader;
    using Tools.Extensions;
    using Tools.UdonEditor;
    using UnityEngine;
    using VRC.Udon;
    using VRC.Udon.Common.Interfaces;
    using VRC.UI.Elements;
    using xAstroBoy.AstroButtonAPI.QuickMenuAPI;
    using xAstroBoy.AstroButtonAPI.Tools;
    using xAstroBoy.AstroButtonAPI.WingsAPI;
    using xAstroBoy.Utility;

    internal class GlobalUdonExploits : AstroEvents
    {
        private static QMWings WingMenu;
        private static QMNestedGridMenu CurrentScrollMenu;
        private static List<QMNestedGridMenu> GeneratedPages = new List<QMNestedGridMenu>();

        private static bool isGenerating { get; set; }
        private static bool CleanOnRoomLeave { get; } = true;
        private static bool DestroyOnMenuClose { get; } = true; // Due to Performance reasons, destroy it and purge the residual buttons to kill any possible lag // TODO : Make it still a option tho.

        private static bool _SpamSelectedEvent = false;
        private static bool SpamSelectedEvent
        {
            get
            {
                return _SpamSelectedEvent;
            }
            set
            {
                _SpamSelectedEvent = value;
                if (SpamUdonBehaviourEvent != null)
                {
                    SpamUdonBehaviourEvent.SetToggleState(value);
                }
            }
        }

        internal static int ActiveSpammers
        {
            get
            {
                return Active_Spammers.Count;
            }
        }

        private static UdonBehaviour_Cached Generated_Spammer { get; set; }
        private static List<UdonBehaviour_Cached> Active_Spammers = new List<UdonBehaviour_Cached>();
        private static bool HasGenerated { get; set; } = false;
        private static bool isOpen { get; set; }

        internal static void StopSpammers()
        {
            if (Active_Spammers.Count != 0)
            {
                foreach (var item in Active_Spammers)
                {
                    item.InvokeOnLoop = false;
                    item.Cleanup();
                }
            }
            Active_Spammers.Clear();
        }
        internal override void OnRoomLeft()
        {
            if (CleanOnRoomLeave)
            {
                DestroyGeneratedButtons();
            }
            isGenerating = false;
            StopSpammers();
        }

        internal static void InitButtons(QMGridTab menu)
        {
            CurrentScrollMenu = new QMNestedGridMenu(menu, "Udon Exploits", "Run Udon Events globally");
            CurrentScrollMenu.SetBackButtonAction(menu, () =>
            {
                OnCloseMenu();
            });
            CurrentScrollMenu.AddOpenAction(() =>
            {
                OnOpenMenu();
            });
            InitWingPage();
        }

        private static bool isDebugging = true;

        private static void Debug(string msg)
        {
            if (isDebugging)
            {
                Log.Debug(msg);
            }
        }
        private static void Regenerate()
        {
            if (!HasGenerated)
            {
                var udonevents = UdonParser.WorldBehaviours;
                if (udonevents != null && udonevents.Count() != 0)
                {
                    for (var index = 0; index < udonevents.Length; index++)
                    {
                        var action = udonevents[index];
                        if (action._eventTable.Count != 0)
                        {
                            var udon = new QMNestedGridMenu(CurrentScrollMenu, action.gameObject.name, $"Open Events of {action.gameObject.name}");
                            GeneratedPages.Add(udon);
                            GenerateInternal(udon, action);
                            udon.AddOpenAction(() =>
                            {
                                if (CurrentUnboxBehaviourToConsole != null)
                                {
                                    CurrentUnboxBehaviourToConsole.SetButtonText($"Unbox {action.gameObject.name}");
                                    CurrentUnboxBehaviourToConsole.SetToolTip($"Attempts to unbox  {action.gameObject.name} in console");
                                    CurrentUnboxBehaviourToConsole.setAction(() => { action.UnboxUdonEventToConsole(); });
                                    CurrentUnboxBehaviourToConsole.SetActive(true);
                                }
                                if (DisassembleUdonBehaviourProgram != null)
                                {
                                    DisassembleUdonBehaviourProgram.SetButtonText($"Disassemble  {action.gameObject.name} Program");
                                    DisassembleUdonBehaviourProgram.SetToolTip($"Attempts to Disassemble  {action.gameObject.name} Program to file");
                                    DisassembleUdonBehaviourProgram.setAction(() => { action.DumpUdonProgramCode(); });
                                    DisassembleUdonBehaviourProgram.SetActive(true);
                                }

                            });
                            udon.SetBackButtonAction(CurrentScrollMenu, () =>
                            {
                                if (CurrentUnboxBehaviourToConsole != null)
                                {
                                    CurrentUnboxBehaviourToConsole.SetButtonText($"Unavailable");
                                    CurrentUnboxBehaviourToConsole.SetToolTip($"Unavailable");
                                    CurrentUnboxBehaviourToConsole.setAction(() => { });
                                    CurrentUnboxBehaviourToConsole.SetActive(false);
                                }
                                if (DisassembleUdonBehaviourProgram != null)
                                {
                                    DisassembleUdonBehaviourProgram.SetButtonText($"Unavailable");
                                    DisassembleUdonBehaviourProgram.SetToolTip($"Unavailable");
                                    DisassembleUdonBehaviourProgram.setAction(() => { });
                                    DisassembleUdonBehaviourProgram.SetActive(false);
                                }

                            });

                        }
                    }
                }
                HasGenerated = true;
                isGenerating = false;
            }
        }

        private static void GenerateInternal(QMNestedGridMenu menu, UdonBehaviour action)
        {
            foreach (var subaction in action._eventTable)
            {
                var btn = new QMSingleButton(menu, subaction.Key, null, $"Invoke Event {subaction.Key} of {action.gameObject?.ToString()} (Interaction : {action.interactText})");
                if (Active_Spammers != null)
                {
                    if (Active_Spammers.Count != 0)
                    {
                        if (Active_Spammers.FirstOrDefault(x => x.UdonBehaviour.Equals(action) && x.EventKey.Equals(subaction.key)) != null)
                        {
                            btn.setTextColorHTML("#FFA500");
                        }
                        else
                        {
                            btn.SetTextColor(Color.white);
                        }
                    }
                }
                btn.SetAction(() =>
                {
                    if (!SpamSelectedEvent)
                    {
                        if (subaction.key.StartsWith("_"))
                        {
                            action.SendCustomEvent(subaction.Key);
                        }
                        else
                        {
                            action.SendCustomNetworkEvent(NetworkEventTarget.All, subaction.Key);
                        }
                    }
                    else
                    {
                        Generated_Spammer = new UdonBehaviour_Cached(action, subaction.key);
                        if (!Active_Spammers.Contains(Generated_Spammer))
                        {
                            Log.Debug($"Spamming Event in {action.name}, {subaction.key}");
                            PopupUtils.QueHudMessage($"<color=#FFA500>Spamming Udon Event in {action.name}, {subaction.key}</color>");
                            Active_Spammers.Add(Generated_Spammer);
                            btn.setTextColorHTML("#FFA500");
                            Generated_Spammer.InvokeOnLoop = true;
                            SpamSelectedEvent = false;
                        }
                        else
                        {
                            Generated_Spammer.Cleanup();
                            Active_Spammers.Remove(Generated_Spammer);
                            btn.SetTextColor(Color.white);
                        }

                    }

                });
            }
        }

        internal static void DestroyGeneratedButtons()
        {
            HasGenerated = false;

            if (GeneratedPages.Count != 0)
            {
                foreach (var item in GeneratedPages) item.DestroyMe();
            }
        }

        internal override void OnQuickMenuClose()
        {
            OnCloseMenu();
        }

        private static void OnCloseMenu()
        {
            if (DestroyOnMenuClose)
            {
                DestroyGeneratedButtons();
            }
            if (WingMenu != null)
            {
                WingMenu.SetActive(false);
                WingMenu.ClickBackButton();
            }
            isOpen = false;

        }

        private static void OnOpenMenu()
        {
            isOpen = true;
            if (WingMenu != null)
            {
                WingMenu.SetActive(true);
                WingMenu.ShowWingsPage();
            }

            if (CurrentUnboxBehaviourToConsole != null)
            {
                CurrentUnboxBehaviourToConsole.SetButtonText($"Unavailable");
                CurrentUnboxBehaviourToConsole.SetToolTip($"Unavailable");
                CurrentUnboxBehaviourToConsole.setAction(() => { });
                CurrentUnboxBehaviourToConsole.SetActive(false);
            }
            if (DisassembleUdonBehaviourProgram != null)
            {
                DisassembleUdonBehaviourProgram.SetButtonText($"Unavailable");
                DisassembleUdonBehaviourProgram.SetToolTip($"Unavailable");
                DisassembleUdonBehaviourProgram.setAction(() => { });
                DisassembleUdonBehaviourProgram.SetActive(false);
            }

            if (!isGenerating)
            {
                Regenerate();
            }
        }

        internal override void OnUiPageToggled(UIPage Page, bool Toggle, UIPage.TransitionType TransitionType)
        {
            if (!isOpen) return;
            if (Page != null)
            {
                if (!Page.ContainsPage(CurrentScrollMenu.page) && !Page.ContainsPage(GeneratedPages) && !Page.ContainsPage(WingMenu.CurrentPage))
                {
                    OnCloseMenu();
                }
            }
        }

        private static void InitWingPage()
        {
            WingMenu = new QMWings(1009, true, "Global Udon Exploits", "Interact with udon behaviours");
            new QMWingSingleButton(WingMenu, "Break Udon Instance", () => { MelonCoroutines.Start(RunAllUdonActions()); }, "Breaks all the events by running all udon events!, But Dont be a fucking toxic asshole who kills udons for fun");
            new QMWingSingleButton(WingMenu, "Dumps All udon Events", () => { MelonCoroutines.Start(DumpUdonEvents()); }, "Dumps all Udon Events in Console & File..");
            new QMWingSingleButton(WingMenu, "Dumps all Udon Events in Console & File..", () => { MelonCoroutines.Start(DumpUdonEventsWithInternals()); }, "Dumps All udon Events & Internals");
            new QMWingSingleButton(WingMenu, "Extract all UdonBehaviour programs..", () => { MelonCoroutines.Start(DumAllUdonProgramCodes()); }, "Dumps All udon Program Codes!");

            new QMWingSingleButton(WingMenu, "Refresh", () =>
            {
                DestroyGeneratedButtons();
                Regenerate();
            }, "Refresh and force menu to regenerate");
            CurrentUnboxBehaviourToConsole = new QMWingSingleButton(WingMenu, "Unbox null", () => { }, "Attempts to unbox null in console..");
            DisassembleUdonBehaviourProgram = new QMWingSingleButton(WingMenu, "Disassemble null Program", () => { }, "Attempts to Disassemble null Program to file..");
            SpamUdonBehaviourEvent = new QMWingToggleButton(WingMenu, "Spam Udon Behaviour Event", () => { SpamSelectedEvent = true; }, () => { SpamSelectedEvent = false; }, "Repeatedly Invokes selected event.");
            new QMWingSingleButton(WingMenu, "Stop Generated Udon Event Spammer..", () => { Generated_Spammer.InvokeOnLoop = false; }, "Halt The Current Generated Udon spammer!");
            new QMWingSingleButton(WingMenu, "Stop All Generated Udon Event Spammer..", () => { StopSpammers(); }, "Halt The Current Generated Udon spammer!");

            DisassembleUdonBehaviourProgram.SetActive(false);
            CurrentUnboxBehaviourToConsole.SetActive(false);
            WingMenu.SetActive(false);
        }

        private static QMWingSingleButton CurrentUnboxBehaviourToConsole;
        private static QMWingSingleButton DisassembleUdonBehaviourProgram;
        private static QMWingToggleButton SpamUdonBehaviourEvent;

        internal static IEnumerator RunAllUdonActions()
        {
            var udonevents = UdonParser.WorldBehaviours;
            if (udonevents == null) { yield return null; }
            if (udonevents.Count() == 0) { yield return null; }
            for (int i = 0; i < udonevents.Length; i++)
            {
                VRC.Udon.UdonBehaviour action = udonevents[i];
                foreach (var subaction in action._eventTable)
                {
                    if (subaction.key.StartsWith("_"))
                    {
                        action.SendCustomEvent(subaction.Key);
                    }
                    else
                    {
                        action.SendCustomNetworkEvent(NetworkEventTarget.All, subaction.Key);
                    }
                    yield return new WaitForSeconds(0.1f);
                }
            }
            yield return null;
        }

        internal static IEnumerator DumpUdonEvents()
        {
            var worldname = WorldUtils.WorldName;
            var udonevents = WorldUtils.UdonScripts;
            if (udonevents == null) { yield return null; }
            if (udonevents.Count() == 0) { yield return null; }
            File.AppendAllText(Path.Combine(Environment.CurrentDirectory, @"AstroClient\Dumper\Udon_Dump_" + worldname + ".log"), $"Dumping all Udon Events in World : {worldname}" + Environment.NewLine);
            for (int i = 0; i < udonevents.Length; i++)
            {
                VRC.Udon.UdonBehaviour action = udonevents[i];
                File.AppendAllText(Path.Combine(Environment.CurrentDirectory, @"AstroClient\Dumper\Udon_Dump_" + worldname + ".log"), $"ACTION: {action.name}" + Environment.NewLine);
                foreach (var subaction in action._eventTable)
                {
                    File.AppendAllText(Path.Combine(Environment.CurrentDirectory, @"AstroClient\Dumper\Udon_Dump_" + worldname + ".log"), $"Key: {subaction.key}" + Environment.NewLine);
                }
            }
            yield return null;
        }
        internal static IEnumerator DumAllUdonProgramCodes()
        {
            var udonevents = WorldUtils.UdonScripts;
            if (udonevents == null) { yield return null; }
            if (udonevents.Count() == 0) { yield return null; }

            foreach (var item in udonevents)
            {
                item.DumpUdonProgramCode();
            }
            yield return null;
        }

        internal static IEnumerator DumpUdonEventsWithInternals()
        {
            var worldname = WorldUtils.WorldName;
            var udonevents = WorldUtils.UdonScripts;
            if (udonevents == null) { yield return null; }
            if (udonevents.Count() == 0) { yield return null; }
            File.AppendAllText(Path.Combine(Environment.CurrentDirectory, @"AstroClient\Dumper\Udon_Dump_Internals_" + worldname + ".log"), $"Dumping all Udon Events in World : {worldname}" + Environment.NewLine);
            for (int i = 0; i < udonevents.Length; i++)
            {
                VRC.Udon.UdonBehaviour action = udonevents[i];
                File.AppendAllText(Path.Combine(Environment.CurrentDirectory, @"AstroClient\Dumper\Udon_Dump_Internals_" + worldname + ".log"), $"ACTION: {action.name}" + Environment.NewLine);
                foreach (var subaction in action._eventTable)
                {
                    File.AppendAllText(Path.Combine(Environment.CurrentDirectory, @"AstroClient\Dumper\Udon_Dump_Internals_" + worldname + ".log"), $"Key: {subaction.key}" + Environment.NewLine);
                }
                File.AppendAllText(Path.Combine(Environment.CurrentDirectory, @"AstroClient\Dumper\Udon_Dump_Internals_" + worldname + ".log"), UdonUnboxer.UnboxUdonToString(action));
            }
            UdonUnboxer.DumpUdonUnsupportedTypes();

            yield return null;
        }
    }
}