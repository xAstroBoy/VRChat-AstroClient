using AstroClient.ClientActions;

namespace AstroClient.ClientUI.Menu.Menus.Quickmenu
{
    #region Imports

    using System;
    using System.Collections.Generic;
    using System.Linq;
    using AstroMonos.Components.Spoofer;
    using AstroMonos.Components.Tools;
    using Cheetos;
    using ClientResources;
    using ClientResources.Loaders;
    using Constants;
    using ESP;
    using RandomSubmenus;
    using Tools.Extensions.Components_exts;
    using Tools.Player;
    using Tools.UdonSearcher;
    using Tools.World;
    using UnityEngine;
    using VRC.Core;
    using xAstroBoy.AstroButtonAPI;
    using xAstroBoy.AstroButtonAPI.QuickMenuAPI;
    using xAstroBoy.Utility;
    using AstroClient.Tools.Keypads;

    #endregion Imports

    internal class ExploitsMenu : AstroEvents
    {
        internal override void RegisterToEvents()
        {
            ClientEventActions.Event_OnRoomLeft += OnRoomLeft;
            ClientEventActions.Event_OnRoomJoined += OnRoomJoined;
            ClientEventActions.Event_OnWorldReveal += OnWorldReveal;

        }
        internal static QMGridTab SubMenu { get; private set; }

        internal static QMToggleButton ToggleHideAvatar;

        internal static QMToggleButton ToggleWorldAuthorSpoofer;

        internal static QMToggleButton ToggleInstanceMasterSpoofer;

        internal static QMToggleButton ToggleUdonWorldAuthorReplacer;

        private static bool _UdonWorldAuthorReplacer;

        internal static bool UdonWorldAuthorReplacer
        {
            get => _UdonWorldAuthorReplacer;
            set
            {
                _UdonWorldAuthorReplacer = value;
                if (ToggleUdonWorldAuthorReplacer != null)
                {
                    ToggleUdonWorldAuthorReplacer.SetToggleState(value);
                }

                if (value)
                {
                    PlayerSpooferUtils.SpoofAsInstanceMaster = false;
                    UdonReplacer.ReplaceString(WorldUtils.AuthorName, PlayerSpooferUtils.SpooferInstance.Original_DisplayName);
                }
            }
        }

        private void OnWorldReveal(string id, string Name, List<string> tags, string AssetURL, string AuthorName)
        {
            if (UdonWorldAuthorReplacer)
            {
                // Wait a bit later than OnFade Revealing (6 second should be good) and Patch the behaviours , gaining all patron perks (there's a small success rate!)
                //  This should be enought to gain patron perks and gain World Author perks as well.
                MiscUtils.DelayFunction(6f, () =>
                {
                    UdonReplacer.ReplaceString(WorldUtils.AuthorName, PlayerSpooferUtils.SpooferInstance.Original_DisplayName);
                    // Turn off spoofer after doing udon patches..
                    PlayerSpooferUtils.IsSpooferActive = false;
                });
            }
        }

        private void OnRoomJoined()
        {
            if (UdonWorldAuthorReplacer)
            {
                if (!PlayerSpooferUtils.IsSpooferActive)
                {
                    PlayerSpooferUtils.SpoofAsWorldAuthor = true;
                    PlayerSpooferUtils.IsSpooferActive = true;
                }
            }
        }

        private void OnRoomLeft()
        {
            if (UdonWorldAuthorReplacer)
            {
                if (!PlayerSpooferUtils.IsSpooferActive)
                {
                    PlayerSpooferUtils.SpoofAsWorldAuthor = true;
                    PlayerSpooferUtils.IsSpooferActive = true;
                }
            }
        }

        internal static void InitButtons(int index)
        {
            SubMenu = new QMGridTab(index, "Exploit Menu", null, null, null, Icons.shuttle_sprite);

            var Avatarstuff = new QMNestedGridMenu(SubMenu, "Avatar", "Avatar Management");

            ToggleHideAvatar = new QMToggleButton(Avatarstuff, 4, 0f, "Hide Avatar", () => { AvatarHider.HideAvatar = true; }, () => { AvatarHider.HideAvatar = false; }, "Hides your avatar for yourself");
            new QMSingleButton(Avatarstuff, 1, 1, "Spawn Avatar Clone", new Action(() => { Clones.SpawnClone(); }), "Spawns current avi clone", null, null, true);
            new QMSingleButton(Avatarstuff, 1, 1.5f, "Remove Avatar Clones", new Action(() => { Clones.RemoveClones(); }), "Removed Spawned avatars clones", null, null, true);

            var WorldExploits = new QMNestedGridMenu(SubMenu, "World Exploits", "Exploits for Worlds");

            ToggleWorldAuthorSpoofer = new QMToggleButton(WorldExploits, 4, 0.5f, "Spoof As World Author", () => { PlayerSpooferUtils.SpoofAsWorldAuthor = true; }, new Action(() => { PlayerSpooferUtils.SpoofAsWorldAuthor = false; }), "Spoofs And Fools world that you are the world authors (WIP). (Only worls with Udon Behaviours.)");
            ToggleInstanceMasterSpoofer = new QMToggleButton(WorldExploits, 4, 1f, "Spoof As Instance Master", () => { PlayerSpooferUtils.SpoofAsInstanceMaster = true; }, new Action(() => { PlayerSpooferUtils.SpoofAsInstanceMaster = false; }), "Spoofs And Fools world that you are the world authors (WIP). (Only worls with Udon Behaviours.)");
            ToggleUdonWorldAuthorReplacer = new QMToggleButton(WorldExploits, 4, 1.5f, "replace Author In behaviours On world Join", () => { UdonWorldAuthorReplacer = true; }, new Action(() => { UdonWorldAuthorReplacer = false; }), "Replace all Behaviours internals author name (if present) with current displayname. (WIP). (Only worls with Udon Behaviours.)");
            new QMSingleButton(WorldExploits, 2, 1.5f, "Reveal All Map Keycodes Codes.", () => { KeypadRevealerHelper.RevealCodes(); }, "Find all Keycodes and spawn a button with code printed there (if compatible).", null, null, true);

            var FunExploits = new QMNestedGridMenu(WorldExploits, "Fun", "Fun Random Exploits Or whatever");

            new QMSingleButton(FunExploits, 2, 0f, "Make Every Pickup Bouncy", () => { WorldUtils_Old.Get_Pickups().Add_Bouncer(false); }, "Turn Every World pickup Bouncy", null, null, true);
            new QMSingleButton(FunExploits, 2, 0.5f, "Remove Bouncers", () => { WorldUtils_Old.Get_Pickups().Remove_Bouncer(); }, "Remove All Bouncing effects on pickups", null, null, true);

            MovementMenu.InitButtons(SubMenu);

            VRChat_Map_ESP_Menu.InitButtons(SubMenu);
            TrollDefenseSubMenu.InitButtons(SubMenu);

            GlobalUdonExploits.InitButtons(SubMenu);
            TriggerSubmenu.InitButtons(SubMenu);
            VRC_InteractableSubMenu.InitButtons(SubMenu);
            AudioSourceSubMenu.InitButtons(SubMenu);
        }

    }
}