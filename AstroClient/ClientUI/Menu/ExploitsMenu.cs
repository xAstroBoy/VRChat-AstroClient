namespace AstroClient.ClientUI.QuickMenuButtons
{
    #region Imports

    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Reflection;
    using AstroButtonAPI;
    using AstroLibrary.Console;
    using AstroLibrary.Extensions;
    using AstroLibrary.Utility;
    using AstroMonos.Components.Spoofer;
    using AstroMonos.Components.Tools.KeycodeRevealer;
    using CheetoLibrary;
    using Cheetos;
    using ESP;
    using Features.Player.Movement.Exploit;
    using Udon;
    using UdonExploits;
    using Variables;

    #endregion Imports

    internal class ExploitsMenu : GameEvents
    {
        internal static QMTabMenu SubMenu { get; private set; }

        internal static QMSingleToggleButton ToggleHideAvatar;

        internal static QMSingleToggleButton ToggleFly;

        internal static QMSingleToggleButton ToggleNoClip;

        internal static QMSingleToggleButton ToggleGhost;

        internal static QMSingleToggleButton ToggleWorldAuthorSpoofer;

        internal static QMSingleToggleButton ToggleInstanceMasterSpoofer;

        internal static QMSingleToggleButton ToggleUdonWorldAuthorReplacer;

        private static bool _UdonWorldAuthorReplacer;
        internal static bool UdonWorldAuthorReplacer
        {
            get => _UdonWorldAuthorReplacer;
            set
            {
                _UdonWorldAuthorReplacer = value;
                if (ToggleUdonWorldAuthorReplacer != null)
                {
                    ToggleUdonWorldAuthorReplacer.SetToggleState(value);
                }

                if (value)
                {
                    PlayerSpooferUtils.SpoofAsInstanceMaster = false;
                    PlayerSpooferUtils.SpoofAsWorldAuthor = false;
                    UdonReplacer.ReplaceString(WorldUtils.AuthorName, PlayerSpooferUtils.SpooferInstance.Original_DisplayName);
                }

            }
        }

        internal override void OnRoomJoined()
        {
            if (UdonWorldAuthorReplacer)
            {
                UdonReplacer.ReplaceString(WorldUtils.AuthorName, PlayerSpooferUtils.SpooferInstance.Original_DisplayName);
            }
        }

        internal static void InitButtons(int index)
        {
            SubMenu = new QMTabMenu(index, "Exploit Menu", null, null, null, CheetoUtils.ExtractResource(Assembly.GetExecutingAssembly(), "AstroClient.Resources.shuttle.png"));

            ToggleHideAvatar = new QMSingleToggleButton(SubMenu, 4, 0f, "Hide Avatar ON", () => { AvatarHider.HideAvatar = true; }, "Hide Avatar OFF", new Action(() => { AvatarHider.HideAvatar = false; }), "Hides your avatar for yourself", UnityEngine.Color.green, UnityEngine.Color.red, null, false, true);
            ToggleWorldAuthorSpoofer = new QMSingleToggleButton(SubMenu, 4, 0.5f, "Spoof As World Autor ON", () => { PlayerSpooferUtils.SpoofAsWorldAuthor = true; }, "Spoof As World Autor OFF", new Action(() => { PlayerSpooferUtils.SpoofAsWorldAuthor = false; }), "Spoofs And Fools world that you are the world authors (WIP). (Only worls with Udon Behaviours.)", UnityEngine.Color.green, UnityEngine.Color.red, null, false, true);
            ToggleInstanceMasterSpoofer = new QMSingleToggleButton(SubMenu, 4, 1f, "Spoof As Instance Master ON", () => { PlayerSpooferUtils.SpoofAsInstanceMaster = true; }, "Spoof As Instance Master OFF", new Action(() => { PlayerSpooferUtils.SpoofAsInstanceMaster = false; }), "Spoofs And Fools world that you are the world authors (WIP). (Only worls with Udon Behaviours.)", UnityEngine.Color.green, UnityEngine.Color.red, null, false, true);
            ToggleUdonWorldAuthorReplacer = new QMSingleToggleButton(SubMenu, 4, 1.5f, "replace Author In behaviours ON", () => { UdonWorldAuthorReplacer = true; }, "replace Author In behaviours OFF", new Action(() => { UdonWorldAuthorReplacer = false; }), "Replace all Behaviours internals author name (if present) with current displayname. (WIP). (Only worls with Udon Behaviours.)", UnityEngine.Color.green, UnityEngine.Color.red, null, false, true);
            if (File.Exists(Environment.CurrentDirectory + @"\RubyClient\RubyClient.dll"))
            {
                ModConsole.Log("RubyClient Detected Buttons Moved");
                //ToggleFly = new QMSingleToggleButton(SubMenu, -0.6f, -1, "Fly", () => { Flight.FlyEnabled = true; }, "Fly", () => { Flight.FlyEnabled = false; }, "Enable/Disable Flight", UnityEngine.Color.green, UnityEngine.Color.red, null, Flight.FlyEnabled, true);
                //ToggleNoClip = new QMSingleToggleButton(SubMenu, -0.6f, -0.5f, "NoClip", () => { Flight.NoClipEnabled = true; }, "NoClip", () => { Flight.NoClipEnabled = false; }, "Enable/Disable NoClip", UnityEngine.Color.green, UnityEngine.Color.red, null, Flight.NoClipEnabled, true);
                ToggleGhost = new QMSingleToggleButton(SubMenu, -0.6f, 0f, "Ghost", () => { MovementSerializer.SerializerActivated = true; }, "Ghost", () => { MovementSerializer.SerializerActivated = false; }, "Enable/Disable Ghost", UnityEngine.Color.green, UnityEngine.Color.red, null, MovementSerializer.SerializerActivated, true);
            }
            else
            {
                //ToggleFly = new QMSingleToggleButton(SubMenu, 0, -1, "Fly", () => { Flight.FlyEnabled = true; }, "Fly", () => { Flight.FlyEnabled = false; }, "Enable/Disable Flight", UnityEngine.Color.green, UnityEngine.Color.red, null, Flight.FlyEnabled, true);
                //ToggleNoClip = new QMSingleToggleButton(SubMenu, 0, -0.5f, "NoClip", () => { Flight.NoClipEnabled = true; }, "NoClip", () => { Flight.NoClipEnabled = false; }, "Enable/Disable NoClip", UnityEngine.Color.green, UnityEngine.Color.red, null, Flight.NoClipEnabled, true);
                ToggleGhost = new QMSingleToggleButton(SubMenu, 0f, 0f, "Ghost", () => { MovementSerializer.SerializerActivated = true; }, "Ghost", () => { MovementSerializer.SerializerActivated = false; }, "Enable/Disable Ghost", UnityEngine.Color.green, UnityEngine.Color.red, null, MovementSerializer.SerializerActivated, true);
            }
            VRChat_Map_ESP_Menu.InitButtons(SubMenu, 1, 0f, true);

            MovementMenu.InitButtons(SubMenu, 1, 0.5f, true);

            if (Bools.IsDeveloper || NetworkingManager.HasUdon)
            {
                GlobalUdonExploits.InitButtons(SubMenu, 1, 1, true);
            }
            RandomSubmenus.TriggerSubMenu(SubMenu, 1, 1.5f, true);
            RandomSubmenus.VRC_InteractableSubMenu(SubMenu, 1, 2, true);
            RandomSubmenus.ToggleAudioSourceSubMebu(SubMenu, 1, 2.5f, true);
            new QMSingleButton(SubMenu, 2, 0f, "Make Every Pickup Bouncy", () => { WorldUtils_Old.Get_Pickups().Add_Bouncer(false); }, "Turn Every World pickup Bouncy", null, null, true);
            new QMSingleButton(SubMenu, 2, 0.5f, "Remove Bouncers", () => { WorldUtils_Old.Get_Pickups().Remove_Bouncer(); }, "Remove All Bouncing effects on pickups", null, null, true);
            new QMSingleButton(SubMenu, 2, 1f, "Spawn Enderpearl", () => { AstroEnderPearl.SpawnEnderPearl(); }, "Spawn a EnderPearl.", null, null, true);
            new QMSingleButton(SubMenu, 2, 1.5f, "Reveal All Map Keycodes Codes.", () => { RevealCodes(); }, "Find all Keycodes and spawn a button with code printed there (if compatible).", null, null, true);

        }

        internal static void RevealCodes()
        {
            var keypads = UdonSearch.FindAllUdonEvents("Keypad", new List<string> { "_interact", "_OnMouseDown" }, true);
            if(keypads != null && keypads.Count != 0)
            foreach (var keypad in keypads)
            {
                keypad.GetOrAddComponent<KeypadRevealer>();
            }
        }

    }
}