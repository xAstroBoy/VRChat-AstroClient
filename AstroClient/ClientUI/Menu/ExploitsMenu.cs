namespace AstroClient.ClientUI.QuickMenuButtons
{
    #region Imports

    using AstroButtonAPI;
    using AstroLibrary.Extensions;
    using AstroLibrary.Utility;
    using AstroMonos.Components.Spoofer;
    using AstroMonos.Components.Tools.KeycodeRevealer;
    using CheetoLibrary;
    using Cheetos;
    using ESP;
    using Features.Player.Clones;
    using System;
    using System.Collections.Generic;
    using System.Reflection;
    using Udon;
    using UdonExploits;
    using Variables;

    #endregion Imports

    internal class ExploitsMenu : GameEvents
    {
        internal static QMGridTab SubMenu { get; private set; }

        internal static QMToggleButton ToggleHideAvatar;

        internal static QMToggleButton ToggleWorldAuthorSpoofer;

        internal static QMToggleButton ToggleInstanceMasterSpoofer;

        internal static QMToggleButton ToggleUdonWorldAuthorReplacer;

        private static bool _UdonWorldAuthorReplacer;

        internal static bool UdonWorldAuthorReplacer
        {
            get => _UdonWorldAuthorReplacer;
            set
            {
                _UdonWorldAuthorReplacer = value;
                if (ToggleUdonWorldAuthorReplacer != null)
                {
                    ToggleUdonWorldAuthorReplacer.SetToggleState(value);
                }

                if (value)
                {
                    PlayerSpooferUtils.SpoofAsInstanceMaster = false;
                    PlayerSpooferUtils.SpoofAsWorldAuthor = false;
                    UdonReplacer.ReplaceString(WorldUtils.AuthorName, PlayerSpooferUtils.SpooferInstance.Original_DisplayName);
                }
            }
        }

        internal override void OnRoomJoined()
        {
            if (UdonWorldAuthorReplacer)
            {
                UdonReplacer.ReplaceString(WorldUtils.AuthorName, PlayerSpooferUtils.SpooferInstance.Original_DisplayName);
            }
        }

        internal static void InitButtons(int index)
        {
            SubMenu = new QMGridTab(index, "Exploit Menu", null, null, null, CheetoUtils.ExtractResource(Assembly.GetExecutingAssembly(), "AstroClient.Resources.shuttle.png"));

            var Avatarstuff = new QMNestedGridMenu(SubMenu, "Avatar", "Avatar Management");

            ToggleHideAvatar = new QMToggleButton(Avatarstuff, 4, 0f, "Hide Avatar", () => { AvatarHider.HideAvatar = true; }, () => { AvatarHider.HideAvatar = false; }, "Hides your avatar for yourself");
            new QMSingleButton(Avatarstuff, 1, 1, "Spawn Avatar Clone", new Action(() => { Clones.SpawnClone(); }), "Spawns current avi clone", null, null, true);
            new QMSingleButton(Avatarstuff, 1, 1.5f, "Remove Avatar Clones", new Action(() => { Clones.RemoveClones(); }), "Removed Spawned avatars clones", null, null, true);

            var WorldExploits = new QMNestedGridMenu(SubMenu, "World Exploits", "Exploits for Worlds");

            ToggleWorldAuthorSpoofer = new QMToggleButton(WorldExploits, 4, 0.5f, "Spoof As World Author", () => { PlayerSpooferUtils.SpoofAsWorldAuthor = true; }, new Action(() => { PlayerSpooferUtils.SpoofAsWorldAuthor = false; }), "Spoofs And Fools world that you are the world authors (WIP). (Only worls with Udon Behaviours.)");
            ToggleInstanceMasterSpoofer = new QMToggleButton(WorldExploits, 4, 1f, "Spoof As Instance Master", () => { PlayerSpooferUtils.SpoofAsInstanceMaster = true; }, new Action(() => { PlayerSpooferUtils.SpoofAsInstanceMaster = false; }), "Spoofs And Fools world that you are the world authors (WIP). (Only worls with Udon Behaviours.)");
            ToggleUdonWorldAuthorReplacer = new QMToggleButton(WorldExploits, 4, 1.5f, "replace Author In behaviours", () => { UdonWorldAuthorReplacer = true; }, new Action(() => { UdonWorldAuthorReplacer = false; }), "Replace all Behaviours internals author name (if present) with current displayname. (WIP). (Only worls with Udon Behaviours.)");
            new QMSingleButton(WorldExploits, 2, 1.5f, "Reveal All Map Keycodes Codes.", () => { RevealCodes(); }, "Find all Keycodes and spawn a button with code printed there (if compatible).", null, null, true);

            var FunExploits = new QMNestedGridMenu(WorldExploits, "Fun", "Fun Random Exploits Or whatever");

            new QMSingleButton(FunExploits, 2, 0f, "Make Every Pickup Bouncy", () => { WorldUtils_Old.Get_Pickups().Add_Bouncer(false); }, "Turn Every World pickup Bouncy", null, null, true);
            new QMSingleButton(FunExploits, 2, 0.5f, "Remove Bouncers", () => { WorldUtils_Old.Get_Pickups().Remove_Bouncer(); }, "Remove All Bouncing effects on pickups", null, null, true);

            MovementMenu.InitButtons(SubMenu);

            VRChat_Map_ESP_Menu.InitButtons(SubMenu);

            if (Bools.IsDeveloper || NetworkingManager.HasUdon)
            {
                GlobalUdonExploits.InitButtons(SubMenu);
            }
            TriggerSubmenu.InitButtons(SubMenu);
            VRC_InteractableSubMenu.InitButtons(SubMenu);
            AudioSourceSubMenu.InitButtons(SubMenu);
        }

        internal static void RevealCodes()
        {
            var keypads = UdonSearch.FindAllUdonEvents("Keypad", new List<string> { "_interact", "_OnMouseDown" }, true);
            if (keypads != null && keypads.Count != 0)
                foreach (var keypad in keypads)
                {
                    keypad.GetOrAddComponent<KeypadRevealer>();
                }
        }
    }
}