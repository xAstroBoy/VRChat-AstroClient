using AstroClient.ClientUI.QuickMenuGUI.ItemTweakerV2.ScrollMenus.Udon;
using AstroClient.ClientUI.QuickMenuGUI.ItemTweakerV2.Selector;
using AstroClient.ClientUI.QuickMenuGUI.Menus.Quickmenu;
using AstroClient.ClientUI.QuickMenuGUI.RandomSubmenus;

namespace AstroClient.ClientUI.ActionMenu
{
    using AstroClient.AstroMonos;
    using AstroClient.AstroMonos.Components.Malicious.Orbit;
    using AstroClient.ClientActions;
    using AstroClient.Constants;
    using AstroClient.Tools.Extensions;
    using AstroClient.Tools.Keypads;
    using AstroMonos.Components.Spoofer;
    using CheetoLibrary.Utility;
    using ClientResources.Loaders;
    using Gompoc.ActionMenuAPI.Api;
    using Spawnables.ColliderSuppresserCube;
    using System.Drawing;
    using Tools.UdonSearcher;
    using xAstroBoy.Utility;

    internal class ExploitModule : AstroEvents
    {
        internal override void RegisterToEvents()
        {
            ClientEventActions.OnApplicationStart += OnApplicationStart;
        }

        private void OnApplicationStart()
        {
            AMUtils.AddToModsFolder("Exploits Options", () =>
            {
                CustomSubMenu.AddSubMenu("Udon Exploits", () =>
                {
                    CustomSubMenu.AddButton("Halt All UdonBehaviour Spammers", () =>
                    {
                        GlobalUdonExploits.StopSpammers();
                        UdonScrollMenu.StopSpammers();
                    }, null);

                    CustomSubMenu.AddButton("Reveal All Map Keycodes Codes", () => { KeypadRevealerHelper.RevealCodes(); }, null);
                }, null);
                CustomSubMenu.AddSubMenu("Spoofer Exploits", () =>
                {
                    CustomSubMenu.AddToggle("replace Author In behaviours on world join!", ExploitsMenu.UdonWorldAuthorReplacer, ToggleValue => { ExploitsMenu.UdonWorldAuthorReplacer = ToggleValue; }, null);
                    CustomSubMenu.AddToggle("Spoof As World Author", PlayerSpooferUtils.SpoofAsWorldAuthor, ToggleValue => { PlayerSpooferUtils.SpoofAsWorldAuthor = ToggleValue; }, null);
                    CustomSubMenu.AddToggle("Spoof As Instance Master", PlayerSpooferUtils.SpoofAsInstanceMaster, ToggleValue => { PlayerSpooferUtils.SpoofAsInstanceMaster = ToggleValue; }, null);
                    CustomSubMenu.AddToggle("Keep Spoofing on room leave/join", PlayerSpooferUtils.KeepNameActivatedOnWorldChange, ToggleValue => { PlayerSpooferUtils.KeepNameActivatedOnWorldChange = ToggleValue; }, null);
                    CustomSubMenu.AddButton("Set Spoofed Name", () =>
                    {
                        CheetoUtils.PopupCall("Spoofed Name : ", "Confirm", PlayerSpooferUtils.SpoofedName, false, (name) => { PlayerSpooferUtils.SpoofAs(name); }, null);
                    });
                    CustomSubMenu.AddButton("Replace Author Name in udonbehaviours.", () =>
                    {
                        if (WorldUtils.IsInWorld)
                        {
                            UdonReplacer.ReplaceString(WorldUtils.AuthorName, PlayerSpooferUtils.SpooferInstance.Original_DisplayName);
                        }
                    });

                    CustomSubMenu.AddToggle("Toggle Spoofer", PlayerSpooferUtils.IsSpooferActive, ToggleValue => { PlayerSpooferUtils.IsSpooferActive = ToggleValue; }, null);
                }, null);
                CustomSubMenu.AddSubMenu("Components Control", () =>
                {
                    if (Bools.AllowAttackerComponent)
                    {
                        CustomSubMenu.AddSubMenu("Attacker Component", () =>
                        {
                            CustomSubMenu.AddButton("Make Held object attack Target (No Collisions)", () =>
                            {
                                Tweaker_Object.GetGameObjectToEdit().AttackTarget(true);
                            }, null);
                            CustomSubMenu.AddButton("Make Held object attack Target", () =>
                            {
                                Tweaker_Object.GetGameObjectToEdit().AttackTarget();
                            }, null);
                            CustomSubMenu.AddButton("Remove Attacker\ncomponent from\nobject", () =>
                            {
                                Tweaker_Object.GetGameObjectToEdit().Remove_PlayerAttacker_Component();
                            }, null);
                            CustomSubMenu.AddButton("Kill \nPlayers \n Attackers", () =>
                            {
                                ComponentsBtn.KillAttackers();
                            }, null);
                        });
                    }
                    if (Bools.AllowOrbitComponent)
                    {
                        CustomSubMenu.AddSubMenu("Orbit Component", () =>
                        {
                            CustomSubMenu.AddButton("Make Held object Orbit around Target", () =>
                            {
                                Tweaker_Object.GetGameObjectToEdit().OrbitTarget();
                            }, null);
                            CustomSubMenu.AddButton("Remove Orbiting component", () =>
                            {
                                Tweaker_Object.GetGameObjectToEdit().Remove_Orbit_Component();
                            }, null);
                            CustomSubMenu.AddButton("Kill all Orbiting Objects", () =>
                            {
                                OrbitManager_Old.RemoveAllOrbitObjects();
                            }, null);
                        });
                    }
                    CustomSubMenu.AddSubMenu("Watcher Component", () =>
                    {
                        CustomSubMenu.AddButton("Make Held object Watch Target", () =>
                        {
                            Tweaker_Object.GetGameObjectToEdit().WatchTarget();
                        }, null);
                        CustomSubMenu.AddButton("Remove Watcher\ncomponent from\nobject", () =>
                        {
                            Tweaker_Object.GetGameObjectToEdit().Remove_PlayerWatcher_Component();
                        }, null);
                        CustomSubMenu.AddButton("Kill \nPlayers \n Watchers", () =>
                        {
                            ComponentsBtn.KillWatchers();
                        }, null);
                    });
                }, null);

                // TODO: Add Textures!
            }, Icons.shuttle);

            Log.Write("Exploits Module is ready!", Color.Green);
        }
    }
}