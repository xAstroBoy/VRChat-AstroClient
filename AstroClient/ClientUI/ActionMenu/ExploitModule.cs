namespace AstroClient.ClientUI.ActionMenu
{
    using System.Drawing;
    using AstroMonos.Components.Spoofer;
    using CheetoLibrary.Utility;
    using ClientResources.Loaders;
    using Gompoc.ActionMenuAPI.Api;
    using Menu.ESP;
    using Menu.ItemTweakerV2.ScrollMenus.Udon;
    using Menu.Menus.Quickmenu;
    using Menu.RandomSubmenus;
    using Spawnables.ColliderSuppresserCube;
    using Spawnables.Enderpearl;
    using Tools.Player.Movement.Exploit;
    using Tools.UdonSearcher;
    using xAstroBoy.Utility;

    internal class ExploitModule : AstroEvents
    {
        internal override void OnApplicationStart()
        {
            AMUtils.AddToModsFolder("Exploits Options", () =>
            {
                CustomSubMenu.AddSubMenu("Udon Exploits", () =>
                {
                    if (GlobalUdonExploits.ActiveSpammers + UdonScrollMenu.ActiveSpammers != 0)
                    {
                        CustomSubMenu.AddButton("Halt All UdonBehaviour Spammers", () =>
                        {
                            GlobalUdonExploits.StopSpammers();
                            UdonScrollMenu.StopSpammers();
                        }, null, false);
                    }

                    CustomSubMenu.AddButton("Reveal All Map Keycodes Codes", () => { ExploitsMenu.RevealCodes(); }, null, false);

                }, null, false, null);
                CustomSubMenu.AddSubMenu("Spoofer Exploits", () =>
                {
                    CustomSubMenu.AddToggle("replace Author In behaviours on world join!", ExploitsMenu.UdonWorldAuthorReplacer, ToggleValue => { ExploitsMenu.UdonWorldAuthorReplacer = ToggleValue; }, null, false);
                    CustomSubMenu.AddToggle("Spoof As World Author", PlayerSpooferUtils.SpoofAsWorldAuthor, ToggleValue => { PlayerSpooferUtils.SpoofAsWorldAuthor = ToggleValue; }, null, false);
                    CustomSubMenu.AddToggle("Spoof As Instance Master", PlayerSpooferUtils.SpoofAsInstanceMaster, ToggleValue => { PlayerSpooferUtils.SpoofAsInstanceMaster = ToggleValue; }, null, false);
                    CustomSubMenu.AddToggle("Keep Spoofing on room leave/join", PlayerSpooferUtils.KeepNameActivatedOnWorldChange, ToggleValue => { PlayerSpooferUtils.KeepNameActivatedOnWorldChange = ToggleValue; }, null, false);
                    CustomSubMenu.AddButton("Set Spoofed Name", () =>
                    {
                        CheetoUtils.PopupCall("Spoofed Name : ", "Confirm", PlayerSpooferUtils.SpoofedName, false, (name) => { PlayerSpooferUtils.SpoofAs(name); }, null);
                    });
                    CustomSubMenu.AddButton("Replace Author Name in udonbehaviours.", () =>
                    {
                        if (WorldUtils.IsInWorld)
                        {
                            UdonReplacer.ReplaceString(WorldUtils.AuthorName, PlayerSpooferUtils.SpooferInstance.Original_DisplayName);
                        }
                    });

                    CustomSubMenu.AddToggle("Toggle Spoofer", PlayerSpooferUtils.IsSpooferActive, ToggleValue => { PlayerSpooferUtils.IsSpooferActive = ToggleValue; }, null, false);

                }, null, false, null);
                CustomSubMenu.AddSubMenu("World Editor", () =>
                {
                    CustomSubMenu.AddSubMenu("Collider Disabler Sphere", () =>
                    {
                        CustomSubMenu.AddButton("Spawn Collider Disabler Sphere", () => { ColliderSuppresserSphere.SpawnSphere(); }, null, false);
                        CustomSubMenu.AddButton("Revert Collider Disabler Edits", () => { ColliderSuppresserSphere.FixAndRevertColliderEdits(); }, null, false);

                    }, null, false, null);

                }, null, false, null);

                // TODO: Add Textures!
            }, Icons.shuttle);

            Log.Write("Exploits Module is ready!", Color.Green);
        }
    }
}