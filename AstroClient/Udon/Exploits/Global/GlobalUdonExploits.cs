namespace AstroClient.UdonExploits
{
    using AstroClient.Components;
    using AstroClient.Udon;
    using AstroLibrary.Extensions;
    using AstroLibrary.Utility;
    using MelonLoader;
    using AstroButtonAPI;
    using System;
    using System.Collections;
    using System.IO;
    using System.Linq;
    using UnityEngine;
    using VRC.Udon.Common.Interfaces;

    internal static class GlobalUdonExploits
    {
        internal static void InitButtons(QMTabMenu menu, float x, float y, bool btnHalf)
        {
            var Menu = new QMNestedButton(menu, x, y, "Udon Exploits", "Run Udon Events globally", null, null, null, null, btnHalf);
            var whytfisthishere = new QMNestedButton(Menu, -5f, -5f, "", "");
            whytfisthishere.GetMainButton().SetActive(false);
            var MainScroll = new QMScrollMenu(whytfisthishere);
            var subscroll = new QMScrollMenu(Menu);
            _ = new QMSingleButton(Menu, 0, -1.5f, "Refresh", delegate
              {
                  MainScroll.Refresh();
                  subscroll.Refresh();
              }, "", null, null, true);
            _ = new QMSingleButton(Menu, 0, -1, "Break Udon Instance", delegate
              {
                  _ = MelonCoroutines.Start(RunAllUdonActions());
              }, "Breaks all the events by running all udon events!, But Dont be a fucking toxic asshole who kills udons for fun.", null, Color.red, true);

            _ = new QMSingleButton(Menu, 0, -0.5f, "Dumps All udon Events", delegate
              {
                  _ = MelonCoroutines.Start(DumpUdonEvents());
              }, "Dumps all Udon Events in Console & File..", null, Color.red, true);

            new QMSingleButton(Menu, 0, -0f, "Dumps All udon Events & Internals", delegate
{
    _ = MelonCoroutines.Start(DumpUdonEventsWithInternals());
}, "Dumps all Udon Events in Console & File..", null, Color.red, true).SetResizeTextForBestFit(true);
            
            subscroll.SetAction(
                delegate
                {
                    for (int i = 0; i < WorldUtils.UdonScripts.Length; i++)
                    {
                        VRC.Udon.UdonBehaviour action = WorldUtils.UdonScripts[i];
                        var btn = new QMSingleButton(Menu, 0f, 0f, action.gameObject.name,
                            delegate
                            {
                                MainScroll.SetAction(
                                    delegate
                                    {
                                        bool HasAddedUnboxerBtn = false;
                                        foreach (var subaction in action._eventTable)
                                        {
                                            if (!HasAddedUnboxerBtn)
                                            {
                                                var unboxer = new QMSingleButton(MainScroll.BaseMenu, 0, 0, $"Unbox {action.name}", () => { action.UnboxUdonEventToConsole(); }, $"Attempts to unbox {action.name} in console..", null, Color.yellow, false);
                                                MainScroll.Add(unboxer, 0, 1f, 0f);
                                                HasAddedUnboxerBtn = true;
                                            }
                                            MainScroll.Add(
                                                new QMSingleButton(MainScroll.BaseMenu, 0f, 0f, subaction.Key,
                                                delegate
                                                {
                                                    if (subaction.key.StartsWith("_"))
                                                    {
                                                        action.SendCustomEvent(subaction.Key);
                                                    }
                                                    else
                                                    {
                                                        action.SendCustomNetworkEvent(NetworkEventTarget.All, subaction.Key);
                                                    }
                                                }, action.gameObject?.ToString() + " Run " + subaction.Key));
                                        }
                                    });
                                MainScroll.BaseMenu.GetMainButton().GetGameObject().GetComponent<UnityEngine.UI.Button>().onClick.Invoke();
                            },
                            action.interactText);
                        var listener = action.gameObject.GetOrAddComponent<ScrollMenuListener>();
                        if (listener != null)
                        {
                            listener.assignedbtn = btn;
                        }
                        subscroll.Add(btn);
                    }
                });
        }

        internal static IEnumerator RunAllUdonActions()
        {
            var udonevents = WorldUtils.UdonScripts;
            if (udonevents == null) { yield return null; }
            if (udonevents.Count() == 0) { yield return null; }
            for (int i = 0; i < udonevents.Length; i++)
            {
                VRC.Udon.UdonBehaviour action = udonevents[i];
                foreach (var subaction in action._eventTable)
                {
                    if (subaction.key.StartsWith("_"))
                    {
                        action.SendCustomEvent(subaction.Key);
                    }
                    else
                    {
                        action.SendCustomNetworkEvent(NetworkEventTarget.All, subaction.Key);
                    }
                    yield return new WaitForSeconds(0.1f);
                }
            }
            yield return null;
        }

        internal static IEnumerator DumpUdonEvents()
        {
            var worldname = WorldUtils.WorldName;
            var udonevents = WorldUtils.UdonScripts;
            if (udonevents == null) { yield return null; }
            if (udonevents.Count() == 0) { yield return null; }
            File.AppendAllText(Path.Combine(Environment.CurrentDirectory, @"AstroClient\Dumper\Udon_Dump_" + worldname + ".log"), $"Dumping all Udon Events in World : {worldname}" + Environment.NewLine);
            for (int i = 0; i < udonevents.Length; i++)
            {
                VRC.Udon.UdonBehaviour action = udonevents[i];
                File.AppendAllText(Path.Combine(Environment.CurrentDirectory, @"AstroClient\Dumper\Udon_Dump_" + worldname + ".log"), $"ACTION: {action.name}" + Environment.NewLine);
                foreach (var subaction in action._eventTable)
                {
                    File.AppendAllText(Path.Combine(Environment.CurrentDirectory, @"AstroClient\Dumper\Udon_Dump_" + worldname + ".log"), $"Key: {subaction.key}" + Environment.NewLine);
                }
            }
            yield return null;
        }

        internal static IEnumerator DumpUdonEventsWithInternals()
        {
            var worldname = WorldUtils.WorldName;
            var udonevents = WorldUtils.UdonScripts;
            if (udonevents == null) { yield return null; }
            if (udonevents.Count() == 0) { yield return null; }
            File.AppendAllText(Path.Combine(Environment.CurrentDirectory, @"AstroClient\Dumper\Udon_Dump_Internals_" + worldname + ".log"), $"Dumping all Udon Events in World : {worldname}" + Environment.NewLine);
            for (int i = 0; i < udonevents.Length; i++)
            {
                VRC.Udon.UdonBehaviour action = udonevents[i];
                File.AppendAllText(Path.Combine(Environment.CurrentDirectory, @"AstroClient\Dumper\Udon_Dump_Internals_" + worldname + ".log"), $"ACTION: {action.name}" + Environment.NewLine);
                foreach (var subaction in action._eventTable)
                {
                    File.AppendAllText(Path.Combine(Environment.CurrentDirectory, @"AstroClient\Dumper\Udon_Dump_Internals_" + worldname + ".log"), $"Key: {subaction.key}" + Environment.NewLine);
                }
                File.AppendAllText(Path.Combine(Environment.CurrentDirectory, @"AstroClient\Dumper\Udon_Dump_Internals_" + worldname + ".log"), UdonUnboxer.UnboxUdonToString(action));
            }
            UdonUnboxer.DumpUdonUnsupportedTypes();

            yield return null;
        }
    }
}