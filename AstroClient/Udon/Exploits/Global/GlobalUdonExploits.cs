namespace AstroClient.UdonExploits
{
	using MelonLoader;
	using RubyButtonAPI;
	using System;
	using System.Collections;
	using System.IO;
	using System.Linq;
	using UnityEngine;
	using VRC.Udon;
	using VRC.Udon.Common.Interfaces;

	public static class GlobalUdonExploits
	{
		public static void InitButtons(QMTabMenu menu, float x, float y, bool btnHalf)
		{
			var Menu = new QMNestedButton(menu, x, y, "Udon Exploits", "Run Udon Events globally", null, null, null, null, btnHalf);
			var whytfisthishere = new QMNestedButton(Menu, -5f, -5f, "", "");
			whytfisthishere.GetMainButton().SetActive(false);
			var MainScroll = new QMScrollMenu(whytfisthishere);
			var subscroll = new QMScrollMenu(Menu);
			new QMSingleButton(Menu, 0, -1.5f, "Refresh", delegate
			{
				MainScroll.Refresh();
				subscroll.Refresh();
			}, "", null, null, true);
			new QMSingleButton(Menu, 0, -1, "Break Udon Instance", delegate
			{
				MelonCoroutines.Start(RunAllUdonActions());
			}, "Breaks all the events by running all udon events!, But Dont be a fucking toxic asshole who kills udons for fun.", null, Color.red, true);

			new QMSingleButton(Menu, 0, -0.5f, "Dumps All udon Events", delegate
			{
				MelonCoroutines.Start(DumpUdonEvents());
			}, "Dumps all Udon Events in Console & File..", null, Color.red, true);

			subscroll.SetAction(delegate
			{
				foreach (var action in WorldUtils.Get_UdonBehaviours())
				{
					subscroll.Add(new QMSingleButton(Menu, 0f, 0f, action.gameObject.name, delegate
					{
						MainScroll.SetAction(delegate
						{
							foreach (var subaction in action._eventTable)
							{
								MainScroll.Add(new QMSingleButton(MainScroll.BaseMenu, 0f, 0f, subaction.Key, delegate
								{
									if (subaction.key.StartsWith("_"))
									{
										action.SendCustomEvent(subaction.Key);
									}
									else
									{
										action.SendCustomNetworkEvent(NetworkEventTarget.All, subaction.Key);
									}
								}, action.gameObject?.ToString() + " Run " + subaction.Key));
							}
						});
						MainScroll.BaseMenu.GetMainButton().GetGameObject().GetComponent<UnityEngine.UI.Button>()
							.onClick.Invoke();
					}, action.interactText));
				}
			});
		}

		public static IEnumerator RunAllUdonActions()
		{
			var udonevents = WorldUtils.Get_UdonBehaviours();
			if (udonevents == null) { yield return null; }
			if (udonevents.Count() == 0) { yield return null; }
			foreach (var action in udonevents)
			{
				foreach (var subaction in action._eventTable)
				{
					if (subaction.key.StartsWith("_"))
					{
						action.SendCustomEvent(subaction.Key);
					}
					else
					{
						action.SendCustomNetworkEvent(NetworkEventTarget.All, subaction.Key);
					}
					yield return new WaitForSeconds(0.1f);
				}
			}
			yield return null;
		}

		public static IEnumerator DumpUdonEvents()
		{
			var worldname = WorldUtils.Get_World_Name();
			var udonevents = WorldUtils.Get_UdonBehaviours();
			if (udonevents == null) { yield return null; }
			if (udonevents.Count() == 0) { yield return null; }
			File.AppendAllText(Path.Combine(Environment.CurrentDirectory, @"AstroClient\Dumper\Udon_Dump_" + worldname + ".log"), $"Dumping all Udon Events in World : {worldname}" + Environment.NewLine);
			foreach (var action in udonevents)
			{
				File.AppendAllText(Path.Combine(Environment.CurrentDirectory, @"AstroClient\Dumper\Udon_Dump_" + worldname + ".log"), $"ACTION: {action.name}" + Environment.NewLine);
				foreach (var subaction in action._eventTable)
				{
					File.AppendAllText(Path.Combine(Environment.CurrentDirectory, @"AstroClient\Dumper\Udon_Dump_" + worldname + ".log"), $"Key: {subaction.key}" + Environment.NewLine);
				}
			}
			yield return null;
		}
	}
}