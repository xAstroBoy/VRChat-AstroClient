namespace AstroClient.UdonExploits
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Management;
    using AstroButtonAPI;
    using AstroLibrary.Extensions;
    using AstroLibrary.Utility;
    using AstroMonos.Components.Tools.Listeners;
    using MelonLoader;
    using Udon;
    using Udon.UdonEditor;
    using UnityEngine;
    using VRC.Udon.Common.Interfaces;
    using VRC.UI.Elements;

    internal class GlobalUdonExploits : GameEvents
    {

        private static QMWings GlobalUdonExploitWings;
        private static QMNestedGridMenu CurrentScrollMenu;
        private static QMWingSingleButton CurrentUnboxBehaviourToConsole;
        private static List<QMNestedGridMenu> GeneratedPages = new List<QMNestedGridMenu>();

        internal static void InitButtons(QMTabMenu menu, float x, float y, bool btnHalf)
        {
            CurrentScrollMenu = new QMNestedGridMenu(menu, x, y, "Udon Exploits", "Run Udon Events globally", null, null, null, null, btnHalf);
            CurrentScrollMenu.SetBackButtonAction(menu);
            CurrentScrollMenu.AddOpenAction(() =>
            {
                var udonevents = UdonParser.CleanedWorldBehaviours;
                if (udonevents != null && udonevents.Count() != 0)
                {
                    for (int i = 0; i < udonevents.Length; i++)
                    {
                        VRC.Udon.UdonBehaviour action = udonevents[i];
                        if (action._eventTable.Count != 0)
                        {
                            var udon = new QMNestedGridMenu(CurrentScrollMenu, action.gameObject.name, "Open Events of " + action.gameObject.name);
                            GeneratedPages.Add(udon);
                            udon.SetBackButtonAction(CurrentScrollMenu);
                            udon.AddOpenAction(() =>
                            {
                                if (CurrentUnboxBehaviourToConsole != null)
                                {
                                    CurrentUnboxBehaviourToConsole.setButtonText($"Unbox {action.gameObject.name}");
                                    CurrentUnboxBehaviourToConsole.setButtonToolTip($"Attempts to unbox  {action.gameObject.name} in console");
                                }
                                foreach (var subaction in action._eventTable)
                                {
                                    new QMSingleButton(udon, subaction.Key, () =>
                                    {
                                        if (subaction.key.StartsWith("_"))
                                        {
                                            action.SendCustomEvent(subaction.Key);
                                        }
                                        else
                                        {
                                            action.SendCustomNetworkEvent(NetworkEventTarget.All, subaction.Key);
                                        }

                                    }, $"Invoke Event {subaction.Key} of {action.gameObject?.ToString()} (Interaction : {action.interactText})", null, false);
                                }
                            });

                        }
                    }
                }
            });
            InitWingPage();
        }


        private static void InitWingPage()
        {
            GlobalUdonExploitWings = new QMWings(1000, true, "Global Udon Exploits", "Interact with udon behaviours");
            new QMWingSingleButton(GlobalUdonExploitWings, "Break Udon Instance", () => { MelonCoroutines.Start(RunAllUdonActions()); }, "Breaks all the events by running all udon events!, But Dont be a fucking toxic asshole who kills udons for fun");
            new QMWingSingleButton(GlobalUdonExploitWings, "Dumps All udon Events", () => { MelonCoroutines.Start(DumpUdonEvents()); }, "Dumps all Udon Events in Console & File..");
            new QMWingSingleButton(GlobalUdonExploitWings, "Dumps all Udon Events in Console & File..", () => { MelonCoroutines.Start(DumpUdonEventsWithInternals()); }, "Dumps All udon Events & Internals");
            CurrentUnboxBehaviourToConsole = new QMWingSingleButton(GlobalUdonExploitWings, "Unbox null", () => { }, "Attempts to unbox null in console..");
            GlobalUdonExploitWings.SetActive(false);
        }



        internal override void OnUiPageToggled(UIPage Page, bool Toggle)
        {
            if (Page != null)
            {
                if (CurrentScrollMenu != null)
                {
                    if (Page.Equals(CurrentScrollMenu.page))
                    {
                        GlobalUdonExploitWings.SetActive(true);
                    }
                    else if (GeneratedPages.ContainsPage(Page))
                    {
                        GlobalUdonExploitWings.SetActive(true);
                    }
                    else
                    {
                        GlobalUdonExploitWings.SetActive(false);
                        if (GeneratedPages.Count != 0)
                        {
                            foreach (var item in GeneratedPages) item.DestroyMe();
                        }
                    }
                }
            }
        }

        internal static IEnumerator RunAllUdonActions()
        {
            var udonevents = UdonParser.CleanedWorldBehaviours;
            if (udonevents == null) { yield return null; }
            if (udonevents.Count() == 0) { yield return null; }
            for (int i = 0; i < udonevents.Length; i++)
            {
                VRC.Udon.UdonBehaviour action = udonevents[i];
                foreach (var subaction in action._eventTable)
                {
                    if (subaction.key.StartsWith("_"))
                    {
                        action.SendCustomEvent(subaction.Key);
                    }
                    else
                    {
                        action.SendCustomNetworkEvent(NetworkEventTarget.All, subaction.Key);
                    }
                    yield return new WaitForSeconds(0.1f);
                }
            }
            yield return null;
        }

        internal static IEnumerator DumpUdonEvents()
        {
            var worldname = WorldUtils.WorldName;
            var udonevents = WorldUtils.UdonScripts;
            if (udonevents == null) { yield return null; }
            if (udonevents.Count() == 0) { yield return null; }
            File.AppendAllText(Path.Combine(Environment.CurrentDirectory, @"AstroClient\Dumper\Udon_Dump_" + worldname + ".log"), $"Dumping all Udon Events in World : {worldname}" + Environment.NewLine);
            for (int i = 0; i < udonevents.Length; i++)
            {
                VRC.Udon.UdonBehaviour action = udonevents[i];
                File.AppendAllText(Path.Combine(Environment.CurrentDirectory, @"AstroClient\Dumper\Udon_Dump_" + worldname + ".log"), $"ACTION: {action.name}" + Environment.NewLine);
                foreach (var subaction in action._eventTable)
                {
                    File.AppendAllText(Path.Combine(Environment.CurrentDirectory, @"AstroClient\Dumper\Udon_Dump_" + worldname + ".log"), $"Key: {subaction.key}" + Environment.NewLine);
                }
            }
            yield return null;
        }

        internal static IEnumerator DumpUdonEventsWithInternals()
        {
            var worldname = WorldUtils.WorldName;
            var udonevents = WorldUtils.UdonScripts;
            if (udonevents == null) { yield return null; }
            if (udonevents.Count() == 0) { yield return null; }
            File.AppendAllText(Path.Combine(Environment.CurrentDirectory, @"AstroClient\Dumper\Udon_Dump_Internals_" + worldname + ".log"), $"Dumping all Udon Events in World : {worldname}" + Environment.NewLine);
            for (int i = 0; i < udonevents.Length; i++)
            {
                VRC.Udon.UdonBehaviour action = udonevents[i];
                File.AppendAllText(Path.Combine(Environment.CurrentDirectory, @"AstroClient\Dumper\Udon_Dump_Internals_" + worldname + ".log"), $"ACTION: {action.name}" + Environment.NewLine);
                foreach (var subaction in action._eventTable)
                {
                    File.AppendAllText(Path.Combine(Environment.CurrentDirectory, @"AstroClient\Dumper\Udon_Dump_Internals_" + worldname + ".log"), $"Key: {subaction.key}" + Environment.NewLine);
                }
                File.AppendAllText(Path.Combine(Environment.CurrentDirectory, @"AstroClient\Dumper\Udon_Dump_Internals_" + worldname + ".log"), UdonUnboxer.UnboxUdonToString(action));
            }
            UdonUnboxer.DumpUdonUnsupportedTypes();

            yield return null;
        }
    }
}