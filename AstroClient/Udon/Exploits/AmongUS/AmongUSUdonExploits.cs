using AstroClient.ConsoleUtils;
using RubyButtonAPI;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using UnityEngine;
using VRC.Udon;
using VRC.Udon.Common.Interfaces;
using static AstroClient.variables.CustomLists;

namespace AstroClient.UdonExploits
{
    public static class AmongUSUdonExploits
    {


        private static List<CachedUdonEvents> CachedDoorsEvents = new List<CachedUdonEvents>(); 

        public static void OnLevelLoad()
        {
            CachedDoorsEvents.Clear();
        }

        private static int RemoveSyncVotedForText(string key)
        {
            var removedtext = key.ToLower().Replace("syncvotedfor", string.Empty).Replace(" ", string.Empty);
            int.TryParse(removedtext, out var value);
            return value;
        }


        

        public static void Init_GameController_Menu(QMNestedButton menu, float x, float y, bool btnHalf)
        {
            var main = new QMNestedButton(menu, x, y, "Game Controller Exploits", "Run Udon Events globally", null, null, null, null, btnHalf);
            main.getMainButton().SetResizeTextForBestFit(true);
            var registersub = new QMNestedButton(main, -5f, -5f, "", "");
            registersub.getMainButton().setActive(false);
            var MainScroll = new QMHalfScroll(registersub);
            var subscroll = new QMHalfScroll(main);
            new QMSingleButton(main, 0, -1, "Refresh", delegate { MainScroll.Refresh(); subscroll.Refresh(); }, "", null, null, true);
            subscroll.SetAction(delegate
            {


                foreach (var action in UnityEngine.Object.FindObjectsOfType<UdonBehaviour>())
                {
                    if (action.gameObject.name == "Game Logic")
                    {
                        foreach (var subaction in action._eventTable)
                        {
                            var subaction_btn = new QMSingleButton(main, 0f, 0f, subaction.Key, null, (action.gameObject)?.ToString() + " Execute " + subaction.Key, null, null, true);
                            subaction_btn.setAction(new Action(() => { action.SendCustomNetworkEvent(NetworkEventTarget.All, subaction.Key); }));
                            subscroll.Add(subaction_btn);
                        }
                        break;
                    }
                }

            });
        }




        public static void Init_SabotageAndRepair_Menu(QMNestedButton menu, float x, float y, bool btnHalf)
        {
            var main = new QMNestedButton(menu, x, y, "Sabotage & Repair Exploits", "Run Udon Events globally", null, null, null, null, btnHalf);
            main.getMainButton().SetResizeTextForBestFit(true);
            var registersub = new QMNestedButton(main, -5f, -5f, "", "");
            registersub.getMainButton().setActive(false);
            var MainScroll = new QMHalfScroll(registersub);
            var subscroll = new QMHalfScroll(main);
            new QMSingleButton(main, 0, -1, "Refresh", delegate { MainScroll.Refresh(); subscroll.Refresh(); }, "", null, null, true);
            subscroll.SetAction(delegate
            {
                foreach (var Behavior in UnityEngine.Object.FindObjectsOfType<UdonBehaviour>())
                {
                    if (Behavior.gameObject.name == "Game Logic")
                    {
                        foreach (var subaction in Behavior._eventTable)
                        {
                            if (subaction.Key.StartsWith("SyncDoSabotage"))
                            {
                                var cleanedstr = subaction.key.Replace("SyncDoSabotage", string.Empty).Replace(" ", string.Empty);

                                var subaction_btn = new QMSingleButton(main, 0f, 0f, "Sabotage " + cleanedstr, null, (Behavior.gameObject)?.ToString() + " Sabotage " + cleanedstr, null, null, true);
                                subaction_btn.setTextColor(Color.red);
                                subaction_btn.setAction(new Action(() => { Behavior.SendCustomNetworkEvent(NetworkEventTarget.All, subaction.Key); }));
                                subscroll.Add(subaction_btn);
                                if (subaction.key.Contains("Doors"))
                                {
                                    var tmp = new CachedUdonEvents(Behavior, subaction.key);
                                    if (!CachedDoorsEvents.Contains(tmp))
                                    {
                                        CachedDoorsEvents.Add(tmp);
                                    }
                                }
                            }
                            else if (subaction.Key.StartsWith("CancelAllSabotage"))
                            {
                                var subaction_btn = new QMSingleButton(main, 0f, 0f, "Cancel All Sabotages ", null, (Behavior.gameObject)?.ToString() + "Cancel All Sabotages", null, null, true);
                                subaction_btn.setTextColor(Color.green);
                                subscroll.Add(subaction_btn);
                            }
                            else if (subaction.Key.StartsWith("SyncRepair"))
                            {
                                var cleanedstr = subaction.key.Replace("SyncRepair", string.Empty).Replace(" ", string.Empty);

                                var subaction_btn = new QMSingleButton(main, 0f, 0f, "Repair " + cleanedstr, null, (Behavior.gameObject)?.ToString() + " Repair " + cleanedstr, null, null, true);
                                subaction_btn.setAction(new Action(() => { Behavior.SendCustomNetworkEvent(NetworkEventTarget.All, subaction.Key); }));
                                subaction_btn.setTextColor(Color.green);
                                subscroll.Add(subaction_btn);
                            }
                        }
                        break;
                    }
                }
                if (CachedDoorsEvents.Count() != 0)
                {
                    var subaction_btn = new QMSingleButton(main, 0f, 0f, "Sabotage All Doors", null, "Sabotage All Doors", null, null, true);
                    subaction_btn.setAction(new Action(() =>
                    {
                        foreach (var dooraction in CachedDoorsEvents)
                        {
                            ModConsole.DebugLog($"Running Cached UDON Event : \n Action : {dooraction.Action.ToString()} \n Key : {dooraction.Key}");
                            dooraction.Action.SendCustomNetworkEvent(NetworkEventTarget.All, dooraction.Key);
                        }
                    }));
                    subaction_btn.setTextColor(Color.red);
                    subscroll.Add(subaction_btn);
                }
                
            });
        }

        public static void InitUnfilteredNodesMenu(QMNestedButton menu, float x, float y, bool btnHalf)
        {

            var submenu = new QMNestedButton(menu, x, y, "Unfiltered Nodes", "Run Udon Events globally ( UNFILTERED )", null, null, null, null, btnHalf);
            submenu.getMainButton().SetResizeTextForBestFit(true);
            var idkwhythisishere = new QMNestedButton(submenu, -5f, -5f, "", "");
            idkwhythisishere.getMainButton().setActive(false);
            var MainScroll = new QMHalfScroll(idkwhythisishere);
            var subscroll = new QMHalfScroll(submenu);
            new QMSingleButton(submenu, 0, -1, "Refresh", delegate
            {
                MainScroll.Refresh();
                subscroll.Refresh();
            }, "", null, null, true);
            subscroll.SetAction(delegate
            {
                if (JarRoleController.JarRoleLinks.Count() != 0)
                {

                    var tmplist = new List<string>();

                    foreach (var Links in JarRoleController.JarRoleLinks)
                    {

                        foreach (var action in Links.Node.GetComponentsInChildren<UdonBehaviour>())
                        {
                            if (action != null)
                            {
                                if (tmplist.Contains(action.gameObject.name))
                                {
                                    continue;
                                }
                                else
                                {
                                    var tmpbtn = new QMSingleButton(submenu, 0f, 0f, action.gameObject.name, delegate
                                        {
                                            MainScroll.SetAction(delegate
                                            {
                                                foreach (var subaction in action._eventTable)
                                                {

                                                    // RENAME SyncVotedFor With Node Name.
                                                    if (subaction.Key.ToLower().StartsWith("syncvotedfor"))
                                                    {
                                                        var GetNodeLink = JarRoleController.GetLinkedComponent(RemoveSyncVotedForText(subaction.key));
                                                        if (GetNodeLink != null)
                                                        {
                                                            var translatedbtn = new QMSingleButton(MainScroll.BaseMenu, 0f, 0f, "Vote: " + GetNodeLink.Node.name, delegate
                                                            {

                                                                action.SendCustomNetworkEvent(NetworkEventTarget.All, subaction.Key);
                                                            }, (action.gameObject)?.ToString() + " Run " + "Vote: " + GetNodeLink.apiuser.displayName, null, null, true);

                                                            translatedbtn.SetResizeTextForBestFit(true);
                                                            MainScroll.Add(translatedbtn);
                                                        }
                                                        else // IGNORE IF CHECK FAILS AND ADD IT ANYWAYS WITH ORIGINAL NAME
                                                        {
                                                            MainScroll.Add(new QMSingleButton(MainScroll.BaseMenu, 0f, 0f, subaction.Key, delegate
                                                            {
                                                                action.SendCustomNetworkEvent(NetworkEventTarget.All, subaction.Key);
                                                            }, (action.gameObject)?.ToString() + " Run " + subaction.Key, null, null, true));
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MainScroll.Add(new QMSingleButton(MainScroll.BaseMenu, 0f, 0f, subaction.Key, delegate
                                                        {
                                                            action.SendCustomNetworkEvent(NetworkEventTarget.All, subaction.Key);
                                                        }, (action.gameObject)?.ToString() + " Run " + subaction.Key, null, null, true));
                                                    }
                                                }
                                            });
                                            MainScroll.BaseMenu.getMainButton().getGameObject().GetComponent<UnityEngine.UI.Button>()
                                                .onClick.Invoke();
                                        }, action.interactText, null, null, true);

                                    tmplist.Add(action.gameObject.name);
                                    subscroll.Add(tmpbtn);
                                }
                            }
                        }
                    }
                }
                else
                {
                    var NoNodesFound = new QMSingleButton(submenu, 0f, 0f, "No Nodes Found", null, "No Nodes Found", null, null, true);
                    MainScroll.Add(NoNodesFound);
                }
            });
        }

        public static void Init_FilteredNodes_Menu(QMNestedButton menu, float x, float y, bool btnHalf)
        {

            var submenu = new QMNestedButton(menu, x, y, "Filtered Nodes", "Run Udon Events globally", null, null, null, null, btnHalf);
            submenu.getMainButton().SetResizeTextForBestFit(true);
            var idkwhythisishere = new QMNestedButton(submenu, -5f, -5f, "", "");
            idkwhythisishere.getMainButton().setActive(false);
            var MainScroll = new QMHalfScroll(idkwhythisishere);
            var subscroll = new QMHalfScroll(submenu);
            new QMSingleButton(submenu, 0, -1, "Refresh", delegate
            {
                MainScroll.Refresh();
                subscroll.Refresh();
            }, "", null, null, true);
            subscroll.SetAction(delegate
            {
                if (JarRoleController.RoleEspComponents.Count() != 0)
                {
                    var tmplist = new List<string>();
                    foreach (var Component in JarRoleController.RoleEspComponents)
                    {
                        if (Component != null)
                        {
                            foreach (var action in Component.Node.GetComponentsInChildren<UdonBehaviour>())
                            {
                                if (action != null)
                                {
                                    if (tmplist.Contains(Component.apiuser.displayName))
                                    {
                                        continue;
                                    }
                                    else
                                    {

                                        var PlayerExploitsChoicesBtn = new QMSingleButton(submenu, 0f, 0f, Component.apiuser.displayName, delegate
                                {
                                    MainScroll.SetAction(delegate
                                    {
                                        foreach (var subaction in action._eventTable)
                                        {
                                            var anothertmplist = new List<string>();
                                                // RENAME SyncVotedFor With Node Name.
                                                if (subaction.Key.ToLower().StartsWith("syncvotedfor"))
                                            {
                                                var LinkedComponent = JarRoleController.GetLinkedComponent(RemoveSyncVotedForText(subaction.key));
                                                if (LinkedComponent != null)
                                                {
                                                    if (anothertmplist.Contains(LinkedComponent.apiuser.displayName))
                                                    {
                                                        continue;
                                                    }
                                                    else
                                                    {
                                                        var SyncVotedForBtn = new QMSingleButton(MainScroll.BaseMenu, 0f, 0f, "Vote: " + LinkedComponent.apiuser.displayName, delegate { action.SendCustomNetworkEvent(NetworkEventTarget.All, subaction.Key); }, (action.gameObject)?.ToString() + " Run " + "Vote: " + LinkedComponent.apiuser.displayName, null, null, true);
                                                        var textcolor = LinkedComponent.AmongUsGetNamePlateColor();
                                                        if (textcolor != null)
                                                        {
                                                            SyncVotedForBtn.setTextColor(textcolor.Value);
                                                        }
                                                        SyncVotedForBtn.SetResizeTextForBestFit(true);
                                                        MainScroll.Add(SyncVotedForBtn);
                                                        anothertmplist.Add(LinkedComponent.apiuser.displayName);
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                var tmp_action_1 = new QMSingleButton(MainScroll.BaseMenu, 0f, 0f, subaction.Key, delegate { action.SendCustomNetworkEvent(NetworkEventTarget.All, subaction.Key); }, (action.gameObject)?.ToString() + " Run " + subaction.Key, null, null, true);
                                                MainScroll.Add(tmp_action_1);
                                            }
                                        }
                                    });
                                    MainScroll.BaseMenu.getMainButton().getGameObject().GetComponent<UnityEngine.UI.Button>()
                                        .onClick.Invoke();
                                }, action.interactText, null, null, true);
                                        var textcolor = Component.AmongUsGetNamePlateColor();
                                        if (textcolor != null)
                                        {
                                            PlayerExploitsChoicesBtn.setTextColor(textcolor.Value);
                                        }
                                        subscroll.Add(PlayerExploitsChoicesBtn);
                                        tmplist.Add(Component.apiuser.displayName);
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    var NoNodesFound = new QMSingleButton(submenu, 0f, 0f, "No Nodes Found", null, "No Nodes Found", null, null, true);
                    MainScroll.Add(NoNodesFound);
                }
            });
        }



        
        public static void Init_ForceVotePlayer_menu(QMNestedButton menu, float x, float y, bool btnHalf)
        {

            var submenu = new QMNestedButton(menu, x, y, "Force Vote", "Run Udon Events globally", null, null, null, null, btnHalf);
            submenu.getMainButton().SetResizeTextForBestFit(true);
            var idkwhythisishere = new QMNestedButton(submenu, -5f, -5f, "", "");
            idkwhythisishere.getMainButton().setActive(false);
            var MainScroll = new QMHalfScroll(idkwhythisishere);
            var subscroll = new QMHalfScroll(submenu);
            new QMSingleButton(submenu, 0, -1, "Refresh", delegate
            {
                MainScroll.Refresh();
                subscroll.Refresh();
            }, "", null, null, true);
            subscroll.SetAction(delegate
            {
                if (JarRoleController.RoleEspComponents.Count() != 0)
                {
                    var tmplist = new List<string>();
                    foreach (var Component in JarRoleController.RoleEspComponents)
                    {
                        if (Component != null)
                        {
                            foreach (var action in Component.Node.GetComponentsInChildren<UdonBehaviour>())
                            {
                                if (action != null)
                                {
                                    if (tmplist.Contains(Component.apiuser.displayName))
                                    {
                                        continue;
                                    }
                                    else
                                    {

                                        var PlayerExploitsChoicesBtn = new QMSingleButton(submenu, 0f, 0f, Component.apiuser.displayName, delegate
                                {
                                    MainScroll.SetAction(delegate
                                    {
                                        foreach (var subaction in action._eventTable)
                                        {
                                            var anothertmplist = new List<string>();
                                                // RENAME SyncVotedFor With Node Name.
                                                if (subaction.Key.ToLower().StartsWith("syncvotedfor"))
                                            {
                                                var LinkedComponent = JarRoleController.GetLinkedComponent(RemoveSyncVotedForText(subaction.key));
                                                if (LinkedComponent != null)
                                                {
                                                    if (anothertmplist.Contains(LinkedComponent.apiuser.displayName))
                                                    {
                                                        continue;
                                                    }
                                                    else
                                                    {
                                                        var SyncVotedForBtn = new QMSingleButton(MainScroll.BaseMenu, 0f, 0f, "Vote: " + LinkedComponent.apiuser.displayName, delegate { action.SendCustomNetworkEvent(NetworkEventTarget.All, subaction.Key); }, (action.gameObject)?.ToString() + " Run " + "Vote: " + LinkedComponent.apiuser.displayName, null, null, true);
                                                        var textcolor = LinkedComponent.AmongUsGetNamePlateColor();
                                                        if (textcolor != null)
                                                        {
                                                            SyncVotedForBtn.setTextColor(textcolor.Value);
                                                        }
                                                        SyncVotedForBtn.SetResizeTextForBestFit(true);
                                                        MainScroll.Add(SyncVotedForBtn);
                                                        anothertmplist.Add(LinkedComponent.apiuser.displayName);
                                                    }
                                                }
                                            }
                                        }
                                    });
                                    MainScroll.BaseMenu.getMainButton().getGameObject().GetComponent<UnityEngine.UI.Button>()
                                        .onClick.Invoke();
                                }, action.interactText, null, null, true);
                                        var textcolor = Component.AmongUsGetNamePlateColor();
                                        if (textcolor != null)
                                        {
                                            PlayerExploitsChoicesBtn.setTextColor(textcolor.Value);
                                        }
                                        subscroll.Add(PlayerExploitsChoicesBtn);
                                        tmplist.Add(Component.apiuser.displayName);
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    var NoNodesFound = new QMSingleButton(submenu, 0f, 0f, "No Nodes Found", null, "No Nodes Found", null, null, true);
                    MainScroll.Add(NoNodesFound);
                }
            });
        }
        

        
        public static void Init_ForcePlayerEject_Menu(QMNestedButton menu, float x, float y, bool btnHalf)
        {
            var submenu = new QMNestedButton(menu, x, y, "Eject Players", "Run Udon Events globally", null, null, null, null, btnHalf);
            submenu.getMainButton().SetResizeTextForBestFit(true);
            var idkwhythisishere = new QMNestedButton(submenu, -5f, -5f, "", "");
            idkwhythisishere.getMainButton().setActive(false);
            var MainScroll = new QMHalfScroll(idkwhythisishere);
            var subscroll = new QMHalfScroll(submenu);
            new QMSingleButton(submenu, 0, -1, "Refresh", delegate
            {
                MainScroll.Refresh();
                subscroll.Refresh();
            }, "", null, null, true);
            subscroll.SetAction(delegate
            {
                if (JarRoleController.RoleEspComponents.Count() != 0)
                {
                    var tmplist = new List<string>();
                    foreach (var Component in JarRoleController.RoleEspComponents)
                    {
                        if (Component != null)
                        {
                            foreach (var action in Component.Node.GetComponentsInChildren<UdonBehaviour>())
                            {
                                if (action != null)
                                {
                                    if (tmplist.Contains(Component.apiuser.displayName))
                                    {
                                        continue;
                                    }
                                    else
                                    {

                                        var KillPlayerBtn = new QMSingleButton(submenu, 0f, 0f, "Eject " + Component.apiuser.displayName, null, "Eject " + Component.apiuser.displayName, null, null, true);
                                        // FIND THE KILL ACTION
                                        foreach (var subaction in action._eventTable)
                                        {
                                            if (subaction.key == "SyncVotedOut")
                                            {
                                                KillPlayerBtn.setAction(new Action(() =>
                                                {
                                                    action.SendCustomNetworkEvent(NetworkEventTarget.All, subaction.Key);
                                                }));
                                                break;
                                            }
                                        }

                                        var textcolor = Component.AmongUsGetNamePlateColor();
                                        if (textcolor != null)
                                        {
                                            KillPlayerBtn.setTextColor(textcolor.Value);
                                        }
                                        subscroll.Add(KillPlayerBtn);
                                        tmplist.Add(Component.apiuser.displayName);
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    var NoNodesFound = new QMSingleButton(submenu, 0f, 0f, "No Nodes Found", null, "No Nodes Found", null, null, true);
                    MainScroll.Add(NoNodesFound);
                }
            });
        }
    


        
        public static void Init_KillPlayers_Menu(QMNestedButton menu, float x, float y, bool btnHalf)
        {

            var submenu = new QMNestedButton(menu, x, y, "Kill Players", "Run Udon Events globally", null, null, null, null, btnHalf);
            submenu.getMainButton().SetResizeTextForBestFit(true);
            var idkwhythisishere = new QMNestedButton(submenu, -5f, -5f, "", "");
            idkwhythisishere.getMainButton().setActive(false);
            var MainScroll = new QMHalfScroll(idkwhythisishere);
            var subscroll = new QMHalfScroll(submenu);
            new QMSingleButton(submenu, 0, -1, "Refresh", delegate
            {
                MainScroll.Refresh();
                subscroll.Refresh();
            }, "", null, null, true);
            subscroll.SetAction(delegate
            {
                if (JarRoleController.RoleEspComponents.Count() != 0)
                {
                    var tmplist = new List<string>();
                    foreach (var Component in JarRoleController.RoleEspComponents)
                    {
                        if (Component != null)
                        {
                            foreach (var action in Component.Node.GetComponentsInChildren<UdonBehaviour>())
                            {
                                if (action != null)
                                {
                                    if (tmplist.Contains(Component.apiuser.displayName))
                                    {
                                        continue;
                                    }
                                    else
                                    {

                                        var KillPlayerBtn = new QMSingleButton(submenu, 0f, 0f, "Kill " + Component.apiuser.displayName, null, "Kill " + Component.apiuser.displayName, null, null, true);
                                        // FIND THE KILL ACTION
                                        foreach(var subaction in action._eventTable)
                                        {
                                            if(subaction.key == "SyncKill")
                                            {
                                                KillPlayerBtn.setAction(new Action(() =>
                                                {
                                                    action.SendCustomNetworkEvent(NetworkEventTarget.All, subaction.Key);
                                                }));
                                                break;
                                            }
                                        }
                                        
                                        var textcolor = Component.AmongUsGetNamePlateColor();
                                        if (textcolor != null)
                                        {
                                            KillPlayerBtn.setTextColor(textcolor.Value);
                                        }
                                        subscroll.Add(KillPlayerBtn);
                                        tmplist.Add(Component.apiuser.displayName);
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    var NoNodesFound = new QMSingleButton(submenu, 0f, 0f, "No Nodes Found", null, "No Nodes Found", null, null, true);
                    MainScroll.Add(NoNodesFound);
                }
            });
        }
    }
}
