using AstroClient.components;
using AstroClient.ConsoleUtils;
using AstroClient.extensions;
using RubyButtonAPI;
using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using VRC.Udon;
using VRC.Udon.Common.Interfaces;
using static AstroClient.variables.CustomLists;

namespace AstroClient.UdonExploits
{
    public class AmongUSUdonExploits : Overridables
    {
        private static List<CachedUdonEvent> CachedDoorsEvents = new List<CachedUdonEvent>();

        public override void OnLevelLoaded()
        {
            CachedDoorsEvents.Clear();
        }

        private static int RemoveSyncVotedForText(string key)
        {
            var removedtext = key.ToLower().Replace("syncvotedfor", string.Empty).Replace(" ", string.Empty);
            int.TryParse(removedtext, out var value);
            return value;
        }

        public static void Init_GameController_Menu(QMNestedButton menu, float x, float y, bool btnHalf)
        {
            var main = new QMNestedButton(menu, x, y, "Game Controller", "Control The Game Events!", null, null, null, null, btnHalf);
            main.getMainButton().SetResizeTextForBestFit(true);
            var registersub = new QMNestedButton(main, -5f, -5f, "", "");
            registersub.getMainButton().setActive(false);
            var MainScroll = new QMHalfScroll(registersub);
            var subscroll = new QMHalfScroll(main);
            new QMSingleButton(main, 0, -1, "Refresh", delegate { MainScroll.Refresh(); subscroll.Refresh(); }, "", null, null, true);
            subscroll.SetAction(delegate
            {
                try
                {
                    foreach (var action in UnityEngine.Object.FindObjectsOfType<UdonBehaviour>())
                    {
                        if (action.gameObject.name == "Game Logic")
                        {
                            foreach (var subaction in action._eventTable)
                            {
                                var subaction_btn = new QMSingleButton(main, 0f, 0f, subaction.Key, null, (action.gameObject)?.ToString() + " Execute " + subaction.Key, null, null, true);
                                subaction_btn.setAction(new Action(() => { action.SendCustomNetworkEvent(NetworkEventTarget.All, subaction.Key); }));
                                subscroll.Add(subaction_btn);
                            }
                            break;
                        }
                    }
                }
                catch (Exception e)
                {
                    ModConsole.Error($"[AMONG US]: Error in Game Controller Exploits Button!");
                    ModConsole.ErrorExc(e);
                    var btnerror = new QMSingleButton(main, 0f, 0f, "ERROR, SEE CONSOLE", null, "ERROR, SEE CONSOLE", null, Color.red, true);
                    subscroll.Add(btnerror);
                }
            }

            );
        }

        public static void Init_SabotageAndRepair_Menu(QMNestedButton menu, float x, float y, bool btnHalf)
        {
            var main = new QMNestedButton(menu, x, y, "Sabotage & Repair Exploits", "Run Udon Events globally", null, null, null, null, btnHalf);
            main.getMainButton().SetResizeTextForBestFit(true);
            var registersub = new QMNestedButton(main, -5f, -5f, "", "");
            registersub.getMainButton().setActive(false);
            var MainScroll = new QMHalfScroll(registersub);
            var subscroll = new QMHalfScroll(main);
            new QMSingleButton(main, 0, -1, "Refresh", delegate { MainScroll.Refresh(); subscroll.Refresh(); }, "", null, null, true);
            subscroll.SetAction(delegate
            {
                try
                {
                    foreach (var Behavior in UnityEngine.Object.FindObjectsOfType<UdonBehaviour>())
                    {
                        if (Behavior.gameObject.name == "Game Logic")
                        {
                            foreach (var subaction in Behavior._eventTable)
                            {
                                if (subaction.Key.StartsWith("SyncDoSabotage"))
                                {
                                    var cleanedstr = subaction.key.Replace("SyncDoSabotage", string.Empty).Replace(" ", string.Empty);

                                    var subaction_btn = new QMSingleButton(main, 0f, 0f, "Sabotage " + cleanedstr, null, (Behavior.gameObject)?.ToString() + " Sabotage " + cleanedstr, null, null, true);
                                    subaction_btn.setTextColor(Color.red);
                                    subaction_btn.setAction(new Action(() => { Behavior.SendCustomNetworkEvent(NetworkEventTarget.All, subaction.Key); }));
                                    subscroll.Add(subaction_btn);
                                    if (subaction.key.Contains("Doors"))
                                    {
                                        var tmp = new CachedUdonEvent(Behavior, subaction.key);
                                        if (!CachedDoorsEvents.Contains(tmp))
                                        {
                                            CachedDoorsEvents.Add(tmp);
                                        }
                                    }
                                }
                                else if (subaction.Key.StartsWith("CancelAllSabotage"))
                                {
                                    var subaction_btn = new QMSingleButton(main, 0f, 0f, "Cancel All Sabotages ", null, (Behavior.gameObject)?.ToString() + "Cancel All Sabotages", null, null, true);
                                    subaction_btn.setTextColor(Color.green);
                                    subscroll.Add(subaction_btn);
                                }
                                else if (subaction.Key.StartsWith("SyncRepair"))
                                {
                                    var cleanedstr = subaction.key.Replace("SyncRepair", string.Empty).Replace(" ", string.Empty);
                                    var subaction_btn = new QMSingleButton(main, 0f, 0f, "Repair " + cleanedstr, null, (Behavior.gameObject)?.ToString() + " Repair " + cleanedstr, null, null, true);
                                    subaction_btn.setAction(new Action(() => { Behavior.SendCustomNetworkEvent(NetworkEventTarget.All, subaction.Key); }));
                                    subaction_btn.setTextColor(Color.green);
                                    subscroll.Add(subaction_btn);
                                }
                            }
                            break;
                        }
                    }
                    if (CachedDoorsEvents.Count() != 0)
                    {
                        var subaction_btn = new QMSingleButton(main, 0f, 0f, "Sabotage All Doors", null, "Sabotage All Doors", null, null, true);
                        subaction_btn.setAction(new Action(() =>
                        {
                            CachedDoorsEvents.ExecuteUdonEvent();
                        }));
                        subaction_btn.setTextColor(Color.red);
                        subscroll.Add(subaction_btn);
                    }
                }
                catch (Exception e)
                {
                    ModConsole.Error($"[AMONG US]: Error in Sabotage & Repair Exploits Button!");
                    ModConsole.ErrorExc(e);
                    var btnerror = new QMSingleButton(main, 0f, 0f, "ERROR, SEE CONSOLE", null, "ERROR, SEE CONSOLE", null, Color.red, true);
                    subscroll.Add(btnerror);
                }
            }
            );
        }

        public static void InitUnfilteredNodesMenu(QMNestedButton menu, float x, float y, bool btnHalf)
        {
            var main = new QMNestedButton(menu, x, y, "Unfiltered Nodes", "Run Udon Events globally ( UNFILTERED )", null, null, null, null, btnHalf);
            main.getMainButton().SetResizeTextForBestFit(true);
            var idkwhythisishere = new QMNestedButton(main, -5f, -5f, "", "");
            idkwhythisishere.getMainButton().setActive(false);
            var MainScroll = new QMHalfScroll(idkwhythisishere);
            var subscroll = new QMHalfScroll(main);
            new QMSingleButton(main, 0, -1, "Refresh", delegate
            {
                MainScroll.Refresh();
                subscroll.Refresh();
            }, "", null, null, true);
            subscroll.SetAction(delegate
            {
                try
                {
                    var filterstring = new List<string>();
                    if (JarRoleController.JarRoleLinks.Count() != 0)
                    {
                        foreach (var Component in JarRoleController.JarRoleLinks)
                        {
                            foreach (var action in Component.Node.GetComponentsInChildren<UdonBehaviour>())
                            {
                                if (action != null)
                                {
                                    if (filterstring.Contains(action.gameObject.name))
                                    {
                                        continue;
                                    }
                                    else
                                    {
                                        subscroll.Add(new QMSingleButton(main, 0f, 0f, action.gameObject.name, delegate
                                        {
                                            MainScroll.SetAction(delegate
                                            {
                                                foreach (var subaction in action._eventTable)
                                                {
                                                    var subaction_btn = new QMSingleButton(MainScroll.BaseMenu, 0f, 0f, subaction.Key, delegate
                                                    {
                                                        action.SendCustomNetworkEvent(NetworkEventTarget.All, subaction.Key);
                                                    }, (action.gameObject)?.ToString() + " Run " + subaction.Key, null, null, true);
                                                    MainScroll.Add(subaction_btn);
                                                }
                                            });
                                            MainScroll.BaseMenu.getMainButton().getGameObject().GetComponent<UnityEngine.UI.Button>()
                                                .onClick.Invoke();
                                        }, action.interactText, null, null, true));
                                        filterstring.Add(action.gameObject.name);
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        var NoNodesFound = new QMSingleButton(main, 0f, 0f, "No Nodes Found", null, "No Nodes Found", null, null, true);
                        subscroll.Add(NoNodesFound);
                    }
                }
                catch (Exception e)
                {
                    ModConsole.Error($"[AMONG US]: Error in Unfiltered Nodes Button!");
                    ModConsole.ErrorExc(e);
                    var btnerror = new QMSingleButton(main, 0f, 0f, "ERROR, SEE CONSOLE", null, "ERROR, SEE CONSOLE", null, Color.red, true);
                    subscroll.Add(btnerror);
                }
            });
        }

        public static void Init_FilteredNodes_Menu(QMNestedButton menu, float x, float y, bool btnHalf)
        {
            var main = new QMNestedButton(menu, x, y, "Filtered Nodes", "Run Udon Events globally", null, null, null, null, btnHalf);
            main.getMainButton().SetResizeTextForBestFit(true);
            var idkwhythisishere = new QMNestedButton(main, -5f, -5f, "", "");
            idkwhythisishere.getMainButton().setActive(false);
            var MainScroll = new QMHalfScroll(idkwhythisishere);
            var subscroll = new QMHalfScroll(main);
            new QMSingleButton(main, 0, -1, "Refresh", delegate
            {
                MainScroll.Refresh();
                subscroll.Refresh();
            }, "", null, null, true);
            subscroll.SetAction(delegate
            {
                try
                {
                    if (JarRoleController.RoleEspComponents.Count() != 0)
                    {
                        var tmplist = new List<string>();
                        foreach (var Component in JarRoleController.RoleEspComponents)
                        {
                            if (Component != null && Component.Node != null && Component.apiuser != null && Component.Entry != null)
                            {
                                foreach (var action in Component.Node.GetComponentsInChildren<UdonBehaviour>())
                                {
                                    if (action != null)
                                    {
                                        if (tmplist.Contains(Component.apiuser.displayName))
                                        {
                                            continue;
                                        }
                                        else
                                        {
                                            var PlayerExploitsChoicesBtn = new QMSingleButton(main, 0f, 0f, Component.apiuser.displayName, delegate
                                    {
                                        MainScroll.SetAction(delegate
                                        {
                                            foreach (var subaction in action._eventTable)
                                            {
                                                var anothertmplist = new List<string>();
                                                // RENAME SyncVotedFor With Node Name.
                                                if (subaction.Key.ToLower().StartsWith("syncvotedfor"))
                                                {
                                                    var LinkedComponent = JarRoleController.GetLinkedComponent(RemoveSyncVotedForText(subaction.key));
                                                    if (LinkedComponent != null)
                                                    {
                                                        if (anothertmplist.Contains(LinkedComponent.apiuser.displayName))
                                                        {
                                                            continue;
                                                        }
                                                        else
                                                        {
                                                            var SyncVotedForBtn = new QMSingleButton(MainScroll.BaseMenu, 0f, 0f, "Vote: " + LinkedComponent.apiuser.displayName, delegate { action.SendCustomNetworkEvent(NetworkEventTarget.All, subaction.Key); }, (action.gameObject)?.ToString() + " Run " + "Vote: " + LinkedComponent.apiuser.displayName, null, null, true);
                                                            if (LinkedComponent.AmongUsGetNamePlateColor() != null)
                                                            {
                                                                SyncVotedForBtn.setTextColor(LinkedComponent.AmongUsGetNamePlateColor().Value);
                                                            }
                                                            SyncVotedForBtn.SetResizeTextForBestFit(true);
                                                            MainScroll.Add(SyncVotedForBtn);
                                                            anothertmplist.Add(LinkedComponent.apiuser.displayName);
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    var tmp_action_1 = new QMSingleButton(MainScroll.BaseMenu, 0f, 0f, subaction.Key, delegate { action.SendCustomNetworkEvent(NetworkEventTarget.All, subaction.Key); }, (action.gameObject)?.ToString() + " Run " + subaction.Key, null, null, true);
                                                    MainScroll.Add(tmp_action_1);
                                                }
                                            }
                                        });
                                        MainScroll.BaseMenu.getMainButton().getGameObject().GetComponent<UnityEngine.UI.Button>()
                                            .onClick.Invoke();
                                    }, action.interactText, null, null, true);
                                            var textcolor = Component.AmongUsGetNamePlateColor();
                                            if (textcolor != null)
                                            {
                                                PlayerExploitsChoicesBtn.setTextColor(textcolor.Value);
                                            }
                                            subscroll.Add(PlayerExploitsChoicesBtn);
                                            tmplist.Add(Component.apiuser.displayName);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        var NoNodesFound = new QMSingleButton(main, 0f, 0f, "No Nodes Found", null, "No Nodes Found", null, null, true);
                        subscroll.Add(NoNodesFound);
                    }
                }
                catch (Exception e)
                {
                    ModConsole.Error($"[AMONG US]: Error in Filtered Nodes Button!");
                    ModConsole.ErrorExc(e);
                    var btnerror = new QMSingleButton(main, 0f, 0f, "ERROR, SEE CONSOLE", null, "ERROR, SEE CONSOLE", null, Color.red, true);
                    subscroll.Add(btnerror);
                }
            }
            );
        }

        // TODO : Make a mechanism to prevent people who already voted so it doesn't make duplicate votes on instances lol

        public static void Init_ForceVotePlayer_menu(QMNestedButton menu, float x, float y, bool btnHalf)
        {
            var main = new QMNestedButton(menu, x, y, "Force Vote", "Run Udon Events globally", null, null, null, null, btnHalf);
            main.getMainButton().SetResizeTextForBestFit(true);
            var idkwhythisishere = new QMNestedButton(main, -5f, -5f, "", "");
            idkwhythisishere.getMainButton().setActive(false);
            var MainScroll = new QMHalfScroll(idkwhythisishere);
            var subscroll = new QMHalfScroll(main);
            new QMSingleButton(main, 0, -1, "Refresh", delegate
            {
                MainScroll.Refresh();
                subscroll.Refresh();
            }, "", null, null, true);
            new QMSingleButton(main, 0, 0, "All Skip voting", delegate
            {
                AllSkipVote();
            }, "", null, Color.green, true);
            subscroll.SetAction(delegate
            {
                try
                {
                    if (JarRoleController.RoleEspComponents.Count() != 0)
                    {
                        var tmplist = new List<string>();
                        foreach (var Component in JarRoleController.RoleEspComponents)
                        {
                            if (Component != null && Component.Node != null && Component.apiuser != null && Component.Entry != null)
                            {
                                foreach (var action in Component.Node.GetComponentsInChildren<UdonBehaviour>())
                                {
                                    if (action != null)
                                    {
                                        if (tmplist.Contains(Component.apiuser.displayName))
                                        {
                                            continue;
                                        }
                                        else
                                        {
                                            var PlayerExploitsChoicesBtn = new QMSingleButton(main, 0f, 0f, Component.apiuser.displayName, delegate
                                    {
                                        MainScroll.SetAction(delegate
                                        {
                                            bool HasAddedEveryoneVoteBtn = false;
                                            foreach (var subaction in action._eventTable)
                                            {
                                                var anothertmplist = new List<string>();
                                                // RENAME SyncVotedFor With Node Name.
                                                if (subaction.Key.ToLower().StartsWith("syncvotedfor"))
                                                {
                                                    var LinkedComponent = JarRoleController.GetLinkedComponent(RemoveSyncVotedForText(subaction.key));
                                                    if (LinkedComponent != null)
                                                    {
                                                        var btnactionname = "Vote: " + LinkedComponent.apiuser.displayName;
                                                        if (anothertmplist.Contains(btnactionname))
                                                        {
                                                            continue;
                                                        }
                                                        else
                                                        {
                                                            var SyncVotedForBtn = new QMSingleButton(MainScroll.BaseMenu, 0f, 0f, btnactionname, delegate { action.SendCustomNetworkEvent(NetworkEventTarget.All, subaction.Key); }, (action.gameObject)?.ToString() + " Run " + btnactionname, null, null, true);
                                                            if (LinkedComponent.AmongUsGetNamePlateColor() != null)
                                                            {
                                                                SyncVotedForBtn.setTextColor(LinkedComponent.AmongUsGetNamePlateColor().Value);
                                                            }
                                                            SyncVotedForBtn.SetResizeTextForBestFit(true);
                                                            if (!anothertmplist.Contains(btnactionname))
                                                            {
                                                                MainScroll.Add(SyncVotedForBtn);
                                                                anothertmplist.Add(btnactionname);
                                                            }
                                                        }
                                                    }
                                                }
                                                if (!HasAddedEveryoneVoteBtn)
                                                {
                                                    var AllVote = new QMSingleButton(MainScroll.BaseMenu, 0f, 0f, "Everyone vote : " + Component.apiuser.displayName, delegate { AllVoteFor(Component); }, (action.gameObject)?.ToString() + "Everyone votes : " + Component.apiuser.displayName, null, Color.green, true);
                                                    AllVote.SetResizeTextForBestFit(true);
                                                    MainScroll.Add(AllVote);
                                                    HasAddedEveryoneVoteBtn = true;
                                                }
                                                if (subaction.Key.ToLower().StartsWith("syncabstainedvoting"))
                                                {
                                                    var SkipVoting = new QMSingleButton(MainScroll.BaseMenu, 0f, 0f, "Skip Voting", delegate { action.SendCustomNetworkEvent(NetworkEventTarget.All, subaction.Key); }, (action.gameObject)?.ToString() + " Run " + "Skip Voting", null, Color.green, true);
                                                    MainScroll.Add(SkipVoting);
                                                }
                                            }
                                        });
                                        MainScroll.BaseMenu.getMainButton().getGameObject().GetComponent<UnityEngine.UI.Button>()
                                            .onClick.Invoke();
                                    }, action.interactText, null, null, true);
                                            var textcolor = Component.AmongUsGetNamePlateColor();
                                            if (textcolor != null)
                                            {
                                                PlayerExploitsChoicesBtn.setTextColor(textcolor.Value);
                                            }
                                            subscroll.Add(PlayerExploitsChoicesBtn);
                                            tmplist.Add(Component.apiuser.displayName);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        var NoNodesFound = new QMSingleButton(main, 0f, 0f, "No Nodes Found", null, "No Nodes Found", null, null, true);
                        subscroll.Add(NoNodesFound);
                    }
                }
                catch (Exception e)
                {
                    ModConsole.Error($"[AMONG US]: Error in Force Vote Button!");
                    ModConsole.ErrorExc(e);
                    var btnerror = new QMSingleButton(main, 0f, 0f, "ERROR, SEE CONSOLE", null, "ERROR, SEE CONSOLE", null, Color.red, true);
                    subscroll.Add(btnerror);
                }
            });
        }

        private static void AllSkipVote()
        {
            if (JarRoleController.RoleEspComponents.Count() != 0)
            {
                foreach (var ActiveNode in JarRoleController.RoleEspComponents)
                {
                    if (ActiveNode != null && ActiveNode.Node != null && ActiveNode.AssignedAmongUS4Role != JarRoleESP.AmongUsRoles.None && ActiveNode.AssignedAmongUS4Role != JarRoleESP.AmongUsRoles.Unassigned)
                    {
                        bool HasVoted = false;
                        foreach (var action in ActiveNode.Node.GetComponentsInChildren<UdonBehaviour>())
                        {
                            foreach (var subaction in action._eventTable)
                            {
                                if (subaction.Key.ToLower().StartsWith("syncabstainedvoting"))
                                {
                                    action.SendCustomNetworkEvent(NetworkEventTarget.All, subaction.Key);
                                    HasVoted = true;
                                    break;
                                }
                            }
                            if (HasVoted)
                            {
                                break;
                            }
                        }
                    }
                }
            }
        }

        // TODO : ENCHANCE OR OPTIMIZE.
        private static void AllVoteFor(JarRoleESP VictimComponent)
        {
            if (VictimComponent != null && VictimComponent.apiuser != null && VictimComponent.Node)
            {
                if (JarRoleController.RoleEspComponents.Count() != 0)
                {
                    foreach (var ActiveNode in JarRoleController.RoleEspComponents)
                    {
                        if (ActiveNode != null && ActiveNode.Node != null && ActiveNode.AssignedAmongUS4Role != JarRoleESP.AmongUsRoles.None && ActiveNode.AssignedAmongUS4Role != JarRoleESP.AmongUsRoles.Unassigned && ActiveNode != VictimComponent.Node)
                        {
                            bool HasVoted = false;
                            foreach (var action in ActiveNode.Node.GetComponentsInChildren<UdonBehaviour>())
                            {
                                foreach (var subaction in action._eventTable)
                                {
                                    if (subaction.Key.ToLower().StartsWith("syncvotedfor"))
                                    {
                                        var ExtractedNode = JarRoleController.GetLinkedComponent(RemoveSyncVotedForText(subaction.key));
                                        if (ExtractedNode != null && ExtractedNode.Node != null && ExtractedNode.AssignedAmongUS4Role != JarRoleESP.AmongUsRoles.None && ExtractedNode.AssignedAmongUS4Role != JarRoleESP.AmongUsRoles.Unassigned)
                                        {
                                            if (ExtractedNode.apiuser.displayName == VictimComponent.apiuser.displayName)
                                            {
                                                //ModConsole.DebugLog($"Executing Udon Event {action.name} with subaction {subaction.key} That Contains Player : {ExtractedNode.apiuser.displayName}");
                                                action.SendCustomNetworkEvent(NetworkEventTarget.All, subaction.Key);
                                                HasVoted = true;
                                                break;
                                            }
                                        }
                                    }
                                }
                                if (HasVoted)
                                {
                                    break;
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void Init_ForcePlayerEject_Menu(QMNestedButton menu, float x, float y, bool btnHalf)
        {
            var main = new QMNestedButton(menu, x, y, "Eject Players", "Run Udon Events globally", null, null, null, null, btnHalf);
            main.getMainButton().SetResizeTextForBestFit(true);
            var idkwhythisishere = new QMNestedButton(main, -5f, -5f, "", "");
            idkwhythisishere.getMainButton().setActive(false);
            var MainScroll = new QMHalfScroll(idkwhythisishere);
            var subscroll = new QMHalfScroll(main);
            new QMSingleButton(main, 0, -1, "Refresh", delegate
            {
                MainScroll.Refresh();
                subscroll.Refresh();
            }, "", null, null, true);
            subscroll.SetAction(delegate
            {
                try
                {
                    if (JarRoleController.RoleEspComponents.Count() != 0)
                    {
                        var tmplist = new List<string>();
                        foreach (var Component in JarRoleController.RoleEspComponents)
                        {
                            if (Component != null && Component.Node != null && Component.apiuser != null && Component.Entry != null)
                            {
                                foreach (var action in Component.Node.GetComponentsInChildren<UdonBehaviour>())
                                {
                                    if (action != null)
                                    {
                                        if (tmplist.Contains(Component.apiuser.displayName))
                                        {
                                            continue;
                                        }
                                        else
                                        {
                                            var KillPlayerBtn = new QMSingleButton(main, 0f, 0f, "Eject " + Component.apiuser.displayName, null, "Eject " + Component.apiuser.displayName, null, null, true);
                                            // FIND THE KILL ACTION
                                            foreach (var subaction in action._eventTable)
                                            {
                                                if (subaction.key == "SyncVotedOut")
                                                {
                                                    KillPlayerBtn.setAction(new Action(() =>
                                                    {
                                                        action.SendCustomNetworkEvent(NetworkEventTarget.All, subaction.Key);
                                                    }));
                                                    break;
                                                }
                                            }

                                            var textcolor = Component.AmongUsGetNamePlateColor();
                                            if (textcolor != null)
                                            {
                                                KillPlayerBtn.setTextColor(textcolor.Value);
                                            }
                                            subscroll.Add(KillPlayerBtn);
                                            tmplist.Add(Component.apiuser.displayName);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        var NoNodesFound = new QMSingleButton(main, 0f, 0f, "No Nodes Found", null, "No Nodes Found", null, null, true);
                        subscroll.Add(NoNodesFound);
                    }
                }
                catch (Exception e)
                {
                    ModConsole.Error($"[AMONG US]: Error in Eject Players Button!");
                    ModConsole.ErrorExc(e);
                    var btnerror = new QMSingleButton(main, 0f, 0f, "ERROR, SEE CONSOLE", null, "ERROR, SEE CONSOLE", null, Color.red, true);
                    subscroll.Add(btnerror);
                }
            });
        }

        public static void Init_KillPlayers_Menu(QMNestedButton menu, float x, float y, bool btnHalf)
        {
            var main = new QMNestedButton(menu, x, y, "Kill Players", "Run Udon Events globally", null, null, null, null, btnHalf);
            main.getMainButton().SetResizeTextForBestFit(true);
            var idkwhythisishere = new QMNestedButton(main, -5f, -5f, "", "");
            idkwhythisishere.getMainButton().setActive(false);
            var MainScroll = new QMHalfScroll(idkwhythisishere);
            var subscroll = new QMHalfScroll(main);
            new QMSingleButton(main, 0, -1, "Refresh", delegate
            {
                MainScroll.Refresh();
                subscroll.Refresh();
            }, "", null, null, true);
            subscroll.SetAction(delegate
            {
                try
                {
                    if (JarRoleController.RoleEspComponents.Count() != 0)
                    {
                        var tmplist = new List<string>();
                        foreach (var Component in JarRoleController.RoleEspComponents)
                        {
                            if (Component != null && Component.Node != null && Component.apiuser != null && Component.Entry != null)
                            {
                                foreach (var action in Component.Node.GetComponentsInChildren<UdonBehaviour>())
                                {
                                    if (action != null)
                                    {
                                        if (tmplist.Contains(Component.apiuser.displayName))
                                        {
                                            continue;
                                        }
                                        else
                                        {
                                            var KillPlayerBtn = new QMSingleButton(main, 0f, 0f, "Kill " + Component.apiuser.displayName, null, "Kill " + Component.apiuser.displayName, null, null, true);
                                            // FIND THE KILL ACTION
                                            foreach (var subaction in action._eventTable)
                                            {
                                                if (subaction.key == "SyncKill")
                                                {
                                                    KillPlayerBtn.setAction(new Action(() =>
                                                    {
                                                        action.SendCustomNetworkEvent(NetworkEventTarget.All, subaction.Key);
                                                    }));
                                                    break;
                                                }
                                            }

                                            var textcolor = Component.AmongUsGetNamePlateColor();
                                            if (textcolor != null)
                                            {
                                                KillPlayerBtn.setTextColor(textcolor.Value);
                                            }
                                            subscroll.Add(KillPlayerBtn);
                                            tmplist.Add(Component.apiuser.displayName);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        var NoNodesFound = new QMSingleButton(main, 0f, 0f, "No Nodes Found", null, "No Nodes Found", null, null, true);
                        subscroll.Add(NoNodesFound);
                    }
                }
                catch (Exception e)
                {
                    ModConsole.Error($"[AMONG US]: Error in Kill Players Button!");
                    ModConsole.ErrorExc(e);
                    var btnerror = new QMSingleButton(main, 0f, 0f, "ERROR, SEE CONSOLE", null, "ERROR, SEE CONSOLE", null, Color.red, true);
                    subscroll.Add(btnerror);
                }
            });
        }
    }
}