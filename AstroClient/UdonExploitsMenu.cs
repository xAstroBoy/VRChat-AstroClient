using AstroClient.ConsoleUtils;
using RubyButtonAPI;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using UnhollowerBaseLib;
using VRC.Udon;
using VRC.Udon.Common.Interfaces;

namespace AstroClient
{
    public static class UdonExploitsMenu
    {

        public static void InitButtons(QMNestedButton menu, float x, float y, bool btnHalf)
        {

            var submenu = new QMNestedButton(menu, x, y, "Udon Exploits", "Run Udon Events globally", null, null, null, null, btnHalf);
            var MainScroll = new QMScroll(new QMNestedButton(submenu, -5f, -5f, "", ""));
            var subscroll = new QMScroll(submenu);
            new QMSingleButton(submenu, 0, -1, "Refresh", delegate
            {
                MainScroll.Refresh();
                subscroll.Refresh();
            }, "", null, null, true);
            subscroll.SetAction(delegate
            {
                foreach (var action in UnityEngine.Object.FindObjectsOfType<UdonBehaviour>())
                {
                    if (WorldUtils.GetWorldID() == "wrld_858dfdfc-1b48-4e1e-8a43-f0edc611e5fe" || WorldUtils.GetWorldID() == "wrld_dd036610-a246-4f52-bf01-9d7cea3405d7")
                    {
                        if (action.gameObject.name == "Game Logic")
                        {
                            var tmp = new QMSingleButton(submenu, 0f, 0f, action.gameObject.name, delegate
                            {
                                MainScroll.SetAction(delegate
                                {
                                    foreach (var subaction in action._eventTable)
                                    {
                                        MainScroll.Add(new QMSingleButton(MainScroll.BaseMenu, 0f, 0f, subaction.Key, delegate
                                        {
                                            action.SendCustomNetworkEvent(NetworkEventTarget.All, subaction.Key);
                                        }, (action.gameObject)?.ToString() + " Execute " + subaction.Key));
                                    }
                                });
                                MainScroll.BaseMenu.getMainButton().getGameObject().GetComponent<UnityEngine.UI.Button>()
                                    .onClick.Invoke();
                            }, action.interactText);
                            subscroll.Add(tmp, 0, true, 1f, 0f);
                            continue;
                        }
                    }

                    subscroll.Add(new QMSingleButton(submenu, 0f, 0f, action.gameObject.name, delegate
                    {
                        MainScroll.SetAction(delegate
                        {
                            foreach (var subaction in action._eventTable)
                            {
                                MainScroll.Add(new QMSingleButton(MainScroll.BaseMenu, 0f, 0f, subaction.Key, delegate
                                {
                                    action.SendCustomNetworkEvent(NetworkEventTarget.All, subaction.Key);
                                }, (action.gameObject)?.ToString() + " Run " + subaction.Key));
                            }
                        });
                        MainScroll.BaseMenu.getMainButton().getGameObject().GetComponent<UnityEngine.UI.Button>()
                            .onClick.Invoke();
                    }, action.interactText));
                }
            });
        }

        public static int RemoveSyncVotedForText(string key)
        {
            var removedtext = key.ToLower().Replace("syncvotedfor", string.Empty).Replace(" ", string.Empty);
            int.TryParse(removedtext, out var value);
            return value;
        }


        public static void InitMurder4ExploitBtn(QMNestedButton menu, float x, float y, bool btnHalf)
        {

            var submenu = new QMNestedButton(menu, x, y, "Murder 4 Exploits", "Run Udon Events globally", null, null, null, null, btnHalf);
            var MainScroll = new QMScroll(new QMNestedButton(submenu, -5f, -5f, "", ""));
            var subscroll = new QMScroll(submenu);
            new QMSingleButton(submenu, 0, -1, "Refresh", delegate
            {
                MainScroll.Refresh();
                subscroll.Refresh();
            }, "", null, null, true);
            subscroll.SetAction(delegate
            {
                
                foreach (var action in UnityEngine.Object.FindObjectsOfType<UdonBehaviour>())
                {
                    if (action.gameObject.name == "Game Logic")
                    {
                        var tmp = new QMSingleButton(submenu, 0f, 0f, action.gameObject.name, delegate
                        {
                            MainScroll.SetAction(delegate
                            {
                                foreach (var subaction in action._eventTable)
                                {
                                    MainScroll.Add(new QMSingleButton(MainScroll.BaseMenu, 0f, 0f, subaction.Key, delegate
                                    {
                                        action.SendCustomNetworkEvent(NetworkEventTarget.All, subaction.Key);
                                    }, (action.gameObject)?.ToString() + " Execute " + subaction.Key));
                                }
                            });
                            MainScroll.BaseMenu.getMainButton().getGameObject().GetComponent<UnityEngine.UI.Button>()
                                .onClick.Invoke();
                        }, action.interactText);
                        subscroll.Add(tmp, 0, true, 1f, 0f);
                        break;
                    }
                }
                if (JarRoleController.ShowHiddenNodes)
                {
                    foreach (var Component in JarRoleController.JarRoleLinks)
                    {
                        foreach (var action in Component.Node.GetComponentsInChildren<UdonBehaviour>())
                        {
                            if (action != null)
                            {
                                subscroll.Add(new QMSingleButton(submenu, 0f, 0f, action.gameObject.name, delegate
                                {
                                    MainScroll.SetAction(delegate
                                    {
                                        foreach (var subaction in action._eventTable)
                                        {
                                            MainScroll.Add(new QMSingleButton(MainScroll.BaseMenu, 0f, 0f, subaction.Key, delegate
                                            {
                                                action.SendCustomNetworkEvent(NetworkEventTarget.All, subaction.Key);
                                            }, (action.gameObject)?.ToString() + " Run " + subaction.Key));
                                        }
                                    });
                                    MainScroll.BaseMenu.getMainButton().getGameObject().GetComponent<UnityEngine.UI.Button>()
                                        .onClick.Invoke();
                                }, action.interactText));
                            }
                        }
                    }
                }
                else
                {
                    var tmplist = new List<string>(); // WHY SO SUDDENLY IT DECIDES TO HAVE MULTIPLE BUTTONS WITH THE SAME PLAYER? FFS
                    foreach (var Component in JarRoleController.RoleESPComponent)
                    {
                        if (Component != null && Component.Entry != null && Component.Node != null && Component.apiuser != null)
                        {
                            foreach (var action in Component.Node.GetComponentsInChildren<UdonBehaviour>())
                            {
                                if (action != null)
                                {
                                    if (tmplist.Contains(Component.apiuser.displayName))
                                    {
                                        continue;
                                    }
                                    else
                                    {
                                        var PlayerExploitsChoicesBtn = new QMSingleButton(submenu, 0f, 0f, Component.apiuser.displayName, delegate
                                         {
                                             MainScroll.SetAction(delegate
                                             {
                                                 foreach (var subaction in action._eventTable)
                                                 {
                                                     MainScroll.Add(new QMSingleButton(MainScroll.BaseMenu, 0f, 0f, subaction.Key, delegate
                                                      {
                                                          action.SendCustomNetworkEvent(NetworkEventTarget.All, subaction.Key);
                                                      }, (action.gameObject)?.ToString() + " Run " + subaction.Key));
                                                 }
                                             });
                                             MainScroll.BaseMenu.getMainButton().getGameObject().GetComponent<UnityEngine.UI.Button>()
                                                 .onClick.Invoke();
                                         }, action.interactText);
                                        var textcolor = Component.Murder4GetNamePlateColor();
                                        if (textcolor != null)
                                        {
                                            PlayerExploitsChoicesBtn.setTextColor(textcolor.Value);
                                        }

                                        subscroll.Add(PlayerExploitsChoicesBtn);
                                        tmplist.Add(Component.apiuser.displayName);
                                    }
                                }

                            }
                        }
                    }

                }
                
            });
        }


        public static void InitAmongUSExploitBtn(QMNestedButton menu, float x, float y, bool btnHalf)
        {

            var submenu = new QMNestedButton(menu, x, y, "Among Us Exploits", "Run Udon Events globally", null, null, null, null, btnHalf);

            var MainScroll = new QMScroll(new QMNestedButton(submenu, -5f, -5f, "", ""));
            var subscroll = new QMScroll(submenu);
            new QMSingleButton(submenu, 0, -1, "Refresh", delegate
            {
                MainScroll.Refresh();
                subscroll.Refresh();
            }, "", null, null, true);
            subscroll.SetAction(delegate
            {

                foreach (var action in UnityEngine.Object.FindObjectsOfType<UdonBehaviour>())
                {
                    if (action.gameObject.name == "Game Logic")
                    {
                        var tmp = new QMSingleButton(submenu, 0f, 0f, action.gameObject.name, delegate
                        {
                            MainScroll.SetAction(delegate
                            {
                                foreach (var subaction in action._eventTable)
                                {
                                    MainScroll.Add(new QMSingleButton(MainScroll.BaseMenu, 0f, 0f, subaction.Key, delegate
                                    {
                                        action.SendCustomNetworkEvent(NetworkEventTarget.All, subaction.Key);
                                    }, (action.gameObject)?.ToString() + " Execute " + subaction.Key));
                                }
                            });
                            MainScroll.BaseMenu.getMainButton().getGameObject().GetComponent<UnityEngine.UI.Button>()
                                .onClick.Invoke();
                        }, action.interactText);
                        subscroll.Add(tmp, 0, true, 1f, 0f);
                        break;
                    }
                }

                if (JarRoleController.ShowHiddenNodes)
                {
                    foreach (var Links in JarRoleController.JarRoleLinks)
                    {
                        foreach (var action in Links.Node.GetComponentsInChildren<UdonBehaviour>())
                        {
                            if (action != null)
                            {
                                subscroll.Add(new QMSingleButton(submenu, 0f, 0f, action.gameObject.name, delegate
                                {
                                    MainScroll.SetAction(delegate
                                    {
                                        foreach (var subaction in action._eventTable)
                                        {

                                            // RENAME SyncVotedFor With Node Name.
                                            if (subaction.Key.ToLower().StartsWith("syncvotedfor"))
                                            {
                                                var GetNodeLink = JarRoleController.GetLinkedComponent(RemoveSyncVotedForText(subaction.key));
                                                if (GetNodeLink != null)
                                                {
                                                    MainScroll.Add(new QMSingleButton(MainScroll.BaseMenu, 0f, 0f, "Voted For : \n" + GetNodeLink.Node.name, delegate
                                                    {

                                                        action.SendCustomNetworkEvent(NetworkEventTarget.All, subaction.Key);
                                                    }, (action.gameObject)?.ToString() + " Run " + "Voted For : \n" + GetNodeLink.apiuser.displayName));
                                                }
                                                else // IGNORE IF CHECK FAILS AND ADD IT ANYWAYS WITH ORIGINAL NAME
                                                {
                                                    MainScroll.Add(new QMSingleButton(MainScroll.BaseMenu, 0f, 0f, subaction.Key, delegate
                                                    {
                                                        action.SendCustomNetworkEvent(NetworkEventTarget.All, subaction.Key);
                                                    }, (action.gameObject)?.ToString() + " Run " + subaction.Key));
                                                }
                                            }
                                            else
                                            {
                                                MainScroll.Add(new QMSingleButton(MainScroll.BaseMenu, 0f, 0f, subaction.Key, delegate
                                                {
                                                    action.SendCustomNetworkEvent(NetworkEventTarget.All, subaction.Key);
                                                }, (action.gameObject)?.ToString() + " Run " + subaction.Key));
                                            }
                                        }
                                    });
                                    MainScroll.BaseMenu.getMainButton().getGameObject().GetComponent<UnityEngine.UI.Button>()
                                        .onClick.Invoke();
                                }, action.interactText));
                            }
                        }
                    }
                }
                else
                {
                    var tmplist = new List<string>(); // WHY SO SUDDENLY IT DECIDES TO HAVE MULTIPLE BUTTONS WITH THE SAME PLAYER? FFS
                    foreach (var Component in JarRoleController.RoleESPComponent)
                    {
                        if (Component != null)
                        {
                            foreach (var action in Component.Node.GetComponentsInChildren<UdonBehaviour>())
                            {
                                if (action != null)
                                {
                                    if (tmplist.Contains(Component.apiuser.displayName))
                                    {
                                        continue;
                                    }
                                    else
                                    {

                                        var PlayerExploitsChoicesBtn = new QMSingleButton(submenu, 0f, 0f, Component.apiuser.displayName, delegate
                                {
                                    MainScroll.SetAction(delegate
                                    {
                                        foreach (var subaction in action._eventTable)
                                        {
                                            var anothertmplist = new List<string>();
                                        // RENAME SyncVotedFor With Node Name.
                                        if (subaction.Key.ToLower().StartsWith("syncvotedfor"))
                                            {
                                                var LinkedComponent = JarRoleController.GetLinkedComponent(RemoveSyncVotedForText(subaction.key));
                                                if (LinkedComponent != null)
                                                {
                                                    if (anothertmplist.Contains(LinkedComponent.apiuser.displayName))
                                                    {
                                                        continue;
                                                    }
                                                    else
                                                    {
                                                        var SyncVotedForBtn = new QMSingleButton(MainScroll.BaseMenu, 0f, 0f, "Voted For : \n" + LinkedComponent.apiuser.displayName, delegate { action.SendCustomNetworkEvent(NetworkEventTarget.All, subaction.Key); }, (action.gameObject)?.ToString() + " Run " + "Voted For : \n" + LinkedComponent.apiuser.displayName);
                                                        var textcolor = LinkedComponent.AmongUsGetNamePlateColor();
                                                        if (textcolor != null)
                                                        {
                                                            SyncVotedForBtn.setTextColor(textcolor.Value);
                                                        }
                                                        MainScroll.Add(SyncVotedForBtn);
                                                        anothertmplist.Add(LinkedComponent.apiuser.displayName);
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                var tmp_action_1 = new QMSingleButton(MainScroll.BaseMenu, 0f, 0f, subaction.Key, delegate { action.SendCustomNetworkEvent(NetworkEventTarget.All, subaction.Key); }, (action.gameObject)?.ToString() + " Run " + subaction.Key);
                                                MainScroll.Add(tmp_action_1);
                                            }
                                        }
                                    });
                                    MainScroll.BaseMenu.getMainButton().getGameObject().GetComponent<UnityEngine.UI.Button>()
                                        .onClick.Invoke();
                                }, action.interactText);
                                        var textcolor = Component.AmongUsGetNamePlateColor();
                                        if (textcolor != null)
                                        {
                                            PlayerExploitsChoicesBtn.setTextColor(textcolor.Value);
                                        }
                                        subscroll.Add(PlayerExploitsChoicesBtn);
                                        tmplist.Add(Component.apiuser.displayName);
                                    }
                                }
                            }
                        }
                    }
                }

            });
        }
    }
}


